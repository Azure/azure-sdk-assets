{
  "Entries": [
    {
      "RequestUri": "https://fake-recorded-host.microsoft.com/openai/deployments/gpt-4/chat/completions?api-version=2024-02-15-preview",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip",
        "Api-Key": "redacted",
        "Content-Length": "318",
        "Content-Type": "application/json",
        "User-Agent": "fake-user-agent"
      },
      "RequestBody": {
        "data_sources": [
          {
            "parameters": {
              "authentication": {
                "key": "redacted",
                "type": "api_key"
              },
              "endpoint": "https://fake-cognitive-endpoint.microsoft.com",
              "index_name": "openai-test-index-carbon-wiki"
            },
            "type": "azure_search"
          }
        ],
        "max_tokens": 512,
        "messages": [
          {
            "content": "What does PR complete mean?",
            "role": "user"
          }
        ],
        "model": "gpt-4"
      },
      "StatusCode": 200,
      "ResponseHeaders": {
        "apim-request-id": "29e4012c-794d-4efe-ba35-1c823c5e112b",
        "Content-Length": "8013",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Sat, 24 Feb 2024 00:07:41 GMT",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains; preload",
        "X-Content-Type-Options": "nosniff",
        "x-envoy-upstream-service-time": "7009",
        "x-ms-region": "North Central US",
        "x-ratelimit-remaining-requests": "9",
        "x-ratelimit-remaining-tokens": "9488"
      },
      "ResponseBody": {
        "id": "e8309da4-9f82-4872-b054-f3d2834ba5e6",
        "model": "gpt-4",
        "created": 1708733261,
        "object": "extensions.chat.completion",
        "choices": [
          {
            "index": 0,
            "finish_reason": "stop",
            "message": {
              "role": "assistant",
              "content": "\u0022PR complete\u0022 or \u0022all PRs out by\u0022 refers to the date when all pull requests that are intended to be part of the release should be functionally complete and out for review. It\u0027s acceptable if it still needs a few updates, but the expectation is that pending PRs should wrap up within a business day or two. This date is tracked in the sprints [doc1].",
              "end_turn": true,
              "context": {
                "citations": [
                  {
                    "content": "\u003Ch2 id=\u0022ai-cognitive-services-sdk-releases\u0022\u003EAI Cognitive Services SDK Releases\u003C/h2\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u0022When\u0027s the next release?\u0022\u003C/li\u003E\n\u003Cli\u003E\u0022How long is there left to get this change in?\u0022\u003C/li\u003E\n\u003Cli\u003E\u0022When did we release that old version?\u0022\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch3 id=\u0022current-in-development-release\u0022\u003ECurrent, in-development release\u003C/h3\u003E\n\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003ESprint Label\u003C/th\u003E\n\u003Cth\u003EVersion - Speech\u003C/th\u003E\n\u003Cth\u003EVersion - Vision\u003C/th\u003E\n\u003Cth\u003EAll PRs out\u003C/th\u003E\n\u003Cth\u003ERelease by\u003C/th\u003E\n\u003Cth\u003ENotes\u003C/th\u003E\n\u003C/tr\u003E\n\u003C/thead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E202301\u003C/td\u003E\n\u003Ctd\u003E1.25.0\u003C/td\u003E\n\u003Ctd\u003E0.7\u003C/td\u003E\n\u003Ctd\u003EFri Jan 13\u003C/td\u003E\n\u003Ctd\u003EFri Jan 27\u003C/td\u003E\n\u003Ctd\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/tbody\u003E\n\u003C/table\u003E\n\u003Cp\u003E\u003Cstrong\u003E\u0022PR complete\u0022 and \u0022release by\u0022\u003C/strong\u003E\u003C/p\u003E\n\u003Cp\u003EWe generally talk about two dates when it comes to upcoming releases:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003EPR complete\u003C/strong\u003E or \u003Cstrong\u003E\u0022all PRs out by\u0022\u003C/strong\u003E: this is the date when all pull requests that are intended to be part of the release should be functionally complete and out for review. It\u0027s OK if it still needs a few updates, but expectations on pending PRs should be that they\u0027ll wrap up within a business day or two. This is what\u0027s tracked in our sprints.\u003C/li\u003E\n\u003Cli\u003E\u003Cstrong\u003ERelease\u003C/strong\u003E or \u003Cstrong\u003E\u0022release by\u0022\u003C/strong\u003E: This is roughly the \u0022P95\u0022 estimate for the latest the publicly-available release packages are published and available under the assumption that the corresponding PR complete date holds. This is an \u003Cem\u003Eestimate\u003C/em\u003E that\u0027s intended to be conservative -- most releases happen before the projected date, but \u003Cstrong\u003Erelease is always gated by readiness\u003C/strong\u003E and it\u0027s possible for things to get postponed. Estimated release dates may be communicated to customers, but only with the clarification that it\u0027s a target and not a guarantee.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EThe single \u0022source of truth\u0022 for the SDK\u0027s \u0022PR complete\u0022 date is the sprint definition on Azure DevOps: \u003Ca href=\u0022https://msasg.visualstudio.com/Skyman/_sprints/taskboard/Carbon%20Team/Skyman/Carbon/\u0022\u003Ehttps://msasg.visualstudio.com/Skyman/_sprints/taskboard/Carbon%20Team/Skyman/Carbon/\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003ESee the sprint date range definition in the upper right, e.g.:\u003C/p\u003E\n\u003Cp\u003E\u003Cimg alt=\u0022image\u0022 src=\u0022https://media.microsoft.ghe.com/user/5475/files/00c74e6f-de09-45dc-ae56-2954ee12006d\u0022 /\u003E\u003C/p\u003E\n\u003Cp\u003E\u0022Release by\u0022 dates, meanwhile, are generally estimated at about two weeks past PR complete -- time enough for in-flight PRs to wrap up, release candidates to be built and validated across all languages/environments, documentation and other external repository resources to be staged, and bits to be published.\u003C/p\u003E\n\u003Cp\u003EThe dates here are replicated for convenience and history. This may not always be entirely up to date; please check the sprint board above or contact the team (cdev) if anything\u0027s unclear!\u003C/p\u003E\n\u003Ch3 id=\u0022release-planning\u0022\u003ERelease planning\u003C/h3\u003E\n\u003Cp\u003E\u003Ca href=\u0022./planning.md\u0022\u003ESDK planning -- Wiki\u003C/a\u003E\u003C/p\u003E\n\u003Ch3 id=\u0022release-signoff\u0022\u003ERelease signoff\u003C/h3\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://microsoft.sharepoint.com/teams/Carbon2/_layouts/OneNote.aspx?id=%2Fteams%2FCarbon2%2FSiteAssets%2FCarbon%20Notebook\u0026amp;wd=target%28Release.one%7C47758B05-9653-4BA3-B15F-0737A0AB5880%2F%29\u0022\u003ESDK release process -- OneNote\u003C/a\u003E\u003C/p\u003E",
                    "title": "AI Cognitive Services SDK Releases",
                    "url": "https://openaisdktestdatastorage.blob.core.windows.net/fileupload-openai-test-index-carbon-wiki/release.md",
                    "filepath": "release.md",
                    "chunk_id": "0"
                  },
                  {
                    "content": "\u003Cp\u003ECustomize your build for Embedded Speech\u003C/p\u003E\n\u003Cp\u003EEmbedded speech (recognition, synthesis) support is not enabled by default. To enable it, download and configure the following external components:\n* ONNX runtime\n * Download build artifacts as instructed in \u003Ccode\u003Eexternal\\onnx_runtime\\README.md\u003C/code\u003E.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003ESR runtime and models\u003C/li\u003E\n\u003Cli\u003EDownload build artifacts as instructed in \u003Ccode\u003Eexternal\\sr_runtime\\README.md\u003C/code\u003E.\u003C/li\u003E\n\u003Cli\u003EAdd \u003Ccode\u003E-DEXTENSION_RNNT_ENABLED=true\u003C/code\u003E to Carbon \u003Ccode\u003Ecmake\u003C/code\u003E options to enable the feature.\u003C/li\u003E\n\u003Cli\u003EIt is not necessary to download all SR models if not specifically needed. \u003Ccode\u003Ecxx_api_tests\u003C/code\u003E uses \u003Ccode\u003EFP\\en-US\\V4\\onnx\u003C/code\u003E and whatever the latest \u003Ccode\u003EFP\\en-US\\V#\\onnx\u003C/code\u003E and \u003Ccode\u003EFP\\de-DE\\V#\\onnx\u003C/code\u003E models are (\u003Ccode\u003E#\u003C/code\u003E = the highest version number available).\u003C/li\u003E\n\u003Cli\u003EIf running \u003Ccode\u003Ecxx_api_tests\u003C/code\u003E, add \u003Ccode\u003E--offlineModelPathList=path\\to\\model(s)\u003C/code\u003E to command-line options.\u003C/li\u003E\n\u003Cli\u003E\n\u003Cp\u003EComplete embedded SR tests require also embedded TTS, as well as KWS and GStreamer (see \u003Cem\u003ECustomized extensions\u003C/em\u003E in this document).\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cp\u003ETTS runtime and voices\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003EDownload build artifacts as instructed in \u003Ccode\u003Eexternal\\offline_tts\\README.md\u003C/code\u003E.\u003C/li\u003E\n\u003Cli\u003E\n\u003Cp\u003EAdd \u003Ccode\u003E-DEXTENSION_HYBRID_TTS_ENABLED=true\u003C/code\u003E to Carbon \u003Ccode\u003Ecmake\u003C/code\u003E options to enable the feature.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\n\u003Cp\u003E1DS C/C\u002B\u002B SDK libraries for embedded speech telemetry on Windows\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003EDownload build artifacts as instructed in \u003Ccode\u003Eexternal\\cpp_client_telemetry_windows\\README.md\u003C/code\u003E.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch4 id=\u0022customized-extensions\u0022\u003ECustomized extensions\u003C/h4\u003E\n\u003Cp\u003ECarbon builds a variety of optional \u003Cem\u003Eextensions\u003C/em\u003E that aren\u0027t included in the build project by default. Each has a set of setup instructions, usually involving downloading a build artifact, and each has a cmake flag to enable it in your local build.\n The \u0022source of truth\u0022 for these extensions is the CMakeLists.txt file in the root folder of your clone; search for \u0022EXTENSION_\u0022 or \u0022DEXTENSION\u0022. As a snap:\u003C/p\u003E\n\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003EExtension\u003C/th\u003E\n\u003Cth\u003EVision/Speech\u003C/th\u003E\n\u003Cth\u003EBuild parameter\u003C/th\u003E\n\u003Cth\u003EUses folders\u003C/th\u003E\n\u003C/tr\u003E\n\u003C/thead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EKWS\u003C/td\u003E\n\u003Ctd\u003ESpeech\u003C/td\u003E\n\u003Ctd\u003E\u003Ccode\u003E-DEXTENSION_KWS_ENABLED=\u0022ON\u0022\u003C/code\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ccode\u003ECarbon\\external\\KWS\u003C/code\u003E (See README.md there)\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EAudio Compression\u003Cbr\u003E(Sending Silk audio to the cloud)\u003C/td\u003E\n\u003Ctd\u003ESpeech\u003C/td\u003E\n\u003Ctd\u003E\u003Ccode\u003E-DEXTENSION_AUDIOCOMPRESSION_ENABLED=\u0022ON\u0022\u003C/code\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ccode\u003ECarbon\\source\\extensions\\audio-compression\u003C/code\u003E\u003Cbr\u003E (TODO is this still used? \u003Ccode\u003ECarbon\\external\\silk-codec\u003C/code\u003E)\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EGStreamer decoder support\u003Cbr\u003E(Decoding compressed input audio)\u003C/td\u003E\n\u003Ctd\u003ESpeech\u003C/td\u003E\n\u003Ctd\u003E\u003Ccode\u003E-DEXTENSION_CODEC_ENABLED=\u0022ON\u0022\u003C/code\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ccode\u003ECarbon\\source\\extensions\\codec\u003C/code\u003E\u003Cbr\u003E\u003Ccode\u003ECarbon\\external\\gstreamer-android\u003C/code\u003E\u003Cbr\u003E\u003Ccode\u003ECarbon\\external\\gstreamer-windows\u003C/code\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EMedia source\u003C/td\u003E\n\u003Ctd\u003EVision\u003C/td\u003E\n\u003Ctd\u003E\u003Ccode\u003E-DEXTENSION_MEDIA_SOURCE_INGESTION_ENABLED=\u0022ON\u0022\u003C/code\u003E\u003C/td\u003E\n\u003Ctd\u003E\u003Ccode\u003Ecarbon\\external\\media-source-ingestion\u003C/code\u003E\u003C/td\u003E\n\u003C/tr\u003E\n\u003C/tbody\u003E\n\u003C/table\u003E\n\u003Cp\u003E\u003Cstrong\u003ENOTE:\u003C/strong\u003E See the instructions in each extension\u0027s folder, e.g. \u003Ccode\u003Ecarbon/external/kws/readme.md\u003C/code\u003E, to ensure a successful local build.\u003C/p\u003E",
                    "title": "Checkout and Build Carbon on Windows",
                    "url": "https://openaisdktestdatastorage.blob.core.windows.net/fileupload-openai-test-index-carbon-wiki/setupwinenv.md",
                    "filepath": "setupwinenv.md",
                    "chunk_id": "1"
                  }
                ],
                "intent": "[\u0022What does PR complete mean?\u0022]"
              }
            }
          }
        ],
        "usage": {
          "prompt_tokens": 5081,
          "completion_tokens": 88,
          "total_tokens": 5169
        }
      }
    }
  ],
  "Variables": {}
}
