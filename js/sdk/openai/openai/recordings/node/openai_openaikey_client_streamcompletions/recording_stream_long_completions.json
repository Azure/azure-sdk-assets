{
  "Entries": [
    {
      "RequestUri": "https://api.openai.com/v1/completions",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip,deflate",
        "Authorization": "Sanitized",
        "Connection": "keep-alive",
        "Content-Length": "2357",
        "Content-Type": "application/json; charset=UTF-8",
        "User-Agent": "azsdk-js-openai-rest/1.0.0-beta.11 core-rest-pipeline/1.14.1 Node/v18.18.0 OS/(x64-Windows_NT-10.0.22621)",
        "x-ms-client-request-id": "f17dd7b4-07a0-4c92-ad8c-fe331a9a002d"
      },
      "RequestBody": {
        "prompt": [
          "##### Translate this code snippet into Python. Use Azure SDKs where possible.\n  \u0060\u0060\u0060\n  using System.Threading.Tasks;\n  using Microsoft.AspNetCore.Mvc;\n  using Microsoft.Azure.WebJobs;\n  using Microsoft.Azure.WebJobs.Extensions.Http;\n  using Microsoft.AspNetCore.Http;\n  using Microsoft.Extensions.Logging;\n  using System;\n  using Azure.Messaging.EventGrid;\n  using Azure.Messaging.EventGrid.SystemEvents;\n  \n  namespace Function1\n  {\n      public static class Function1\n      {\n          [FunctionName(\u0022Function1\u0022)]\n          public static async Task\u003CIActionResult\u003E Run(\n              [HttpTrigger(AuthorizationLevel.Anonymous, \u0022get\u0022, \u0022post\u0022, Route = null)] HttpRequest req,\n              ILogger log)\n          {\n              log.LogInformation(\u0022C# HTTP trigger function processed a request.\u0022);\n              string response = string.Empty;\n              BinaryData events = await BinaryData.FromStreamAsync(req.Body);\n              log.LogInformation($\u0022Received events: {events}\u0022);\n  \n              EventGridEvent[] eventGridEvents = EventGridEvent.ParseMany(events);\n  \n              foreach (EventGridEvent eventGridEvent in eventGridEvents)\n              {\n                  // Handle system events\n                  if (eventGridEvent.TryGetSystemEventData(out object eventData))\n                  {\n                      // Handle the subscription validation event\n                      if (eventData is SubscriptionValidationEventData subscriptionValidationEventData)\n                      {\n                          log.LogInformation($\u0022Got SubscriptionValidation event data, validation code: {subscriptionValidationEventData.ValidationCode}, topic: {eventGridEvent.Topic}\u0022);\n                          // Do any additional validation (as required) and then return back the below response\n                          var responseData = new\n                          {\n                              ValidationResponse = subscriptionValidationEventData.ValidationCode\n                          };\n  \n                          return new OkObjectResult(responseData);\n                      }\n                  }\n              }\n              return new OkObjectResult(response);\n          }\n      }\n  }\n  \n  \u0060\u0060\u0060\n  "
        ],
        "max_tokens": 2048,
        "stream": true,
        "model": "text-davinci-003"
      },
      "StatusCode": 404,
      "ResponseHeaders": {
        "Alt-Svc": "h3=\u0022:443\u0022",
        "CF-Cache-Status": "DYNAMIC",
        "CF-RAY": "852996c70c5c6ce2-SEA",
        "Connection": "keep-alive",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Fri, 09 Feb 2024 05:07:28 GMT",
        "Server": "cloudflare",
        "Strict-Transport-Security": "max-age=15724800; includeSubDomains",
        "Transfer-Encoding": "chunked",
        "Vary": "Origin",
        "X-Request-ID": "req_b7f0f82fd46839e49e6838bf0219c06d"
      },
      "ResponseBody": {
        "error": {
          "message": "The model \u0060text-davinci-003\u0060 has been deprecated, learn more here: https://platform.openai.com/docs/deprecations",
          "type": "invalid_request_error",
          "param": null,
          "code": "model_not_found"
        }
      }
    }
  ],
  "Variables": {}
}
