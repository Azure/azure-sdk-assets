{
  "Entries": [
    {
      "RequestUri": "https://Sanitized.openai.azure.com/openai/deployments/gpt-4o-0806/chat/completions?api-version=2024-07-01-preview",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "api-key": "Sanitized",
        "Content-Length": "350",
        "Content-Type": "application/json",
        "User-Agent": "azsdk-net-AI.OpenAI/2.0.0-beta.5 (.NET 8.0.8; Microsoft Windows 10.0.22631)",
        "x-ms-client-request-id": "Sanitized"
      },
      "RequestBody": {
        "messages": [
          {
            "role": "user",
            "content": "What does the term 'PR complete' mean?"
          }
        ],
        "model": "gpt-4o-0806",
        "data_sources": [
          {
            "parameters": {
              "allow_partial_result": true,
              "endpoint": "https://Sanitized.search.windows.net/",
              "index_name": "openai-readmes-index",
              "authentication": {
                "key": "Sanitized",
                "type": "api_key"
              },
              "query_type": "simple"
            },
            "type": "azure_search"
          }
        ]
      },
      "StatusCode": 200,
      "ResponseHeaders": {
        "apim-request-id": "2536bd94-6a2e-4e18-bbc2-2228dc7181b8",
        "Connection": "keep-alive",
        "Content-Length": "9232",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 10 Sep 2024 21:13:46 GMT",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains; preload",
        "X-Content-Type-Options": "nosniff",
        "x-envoy-upstream-service-time": "1013",
        "x-ms-client-request-id": "Sanitized",
        "x-ms-region": "East US",
        "x-ratelimit-remaining-requests": "4464",
        "x-ratelimit-remaining-tokens": "434472"
      },
      "ResponseBody": {
        "id": "ebee24ad-f5c0-4cdc-98ba-77a8f17c0607",
        "model": "gpt-4o",
        "created": 1726002826,
        "object": "extensions.chat.completion",
        "choices": [
          {
            "index": 0,
            "finish_reason": "stop",
            "message": {
              "role": "assistant",
              "content": "The requested information is not available in the retrieved data. Please try another query or topic.",
              "end_turn": true,
              "context": {
                "citations": [
                  {
                    "content": "## Contributing\n\nThis project welcomes contributions and suggestions. Most contributions require you to agree to a [Contributor License Agreement (CLA)][cla] declaring that you have the right to, and actually do, grant us the rights to use your contribution.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate\nthe PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to\ndo this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][coc]. For more information, see\nthe [Code of Conduct FAQ][coc_faq] or contact [opencode@microsoft.com][coc_contact] with any additional questions or\ncomments.\n\n\n[azure_openai_access]: https://learn.microsoft.com/azure/cognitive-services/openai/overview#how-do-i-get-access-to-azure-openai\n[azopenai_repo]: https://github.com/Azure/azure-sdk-for-go/tree/main/sdk/ai/azopenai\n[azopenai_pkg_go]: https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/ai/azopenai\n[azure_identity]: https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/azidentity\n[azure_sub]: https://azure.microsoft.com/free/\n[openai_docs]: https://learn.microsoft.com/azure/cognitive-services/openai\n[openai_key_concepts]: https://learn.microsoft.com/azure/cognitive-services/openai/overview#key-concepts\n[openai_rest_docs]: https://learn.microsoft.com/azure/cognitive-services/openai/reference\n[cla]: https://cla.microsoft.com\n[coc]: https://opensource.microsoft.com/codeofconduct/\n[coc_faq]: https://opensource.microsoft.com/codeofconduct/faq/\n[coc_contact]: mailto:opencode@microsoft.com\n[azure_openai_quickstart]: https://learn.microsoft.com/azure/cognitive-services/openai/quickstart",
                    "title": "Azure OpenAI client module for Go",
                    "url": "https://openainewsdkteststorage.blob.core.windows.net/fileupload-openai-readmes-index/azure-go.md",
                    "filepath": "azure-go.md",
                    "chunk_id": "0"
                  },
                  {
                    "content": "## Key concepts\n\n## Examples\nThe following sections provide several code snippets covering some of the most common OpenAI service tasks, including:\n\n* [Text completions sample](#text-completions \"Text completions\")\n* [Streaming text completions sample](#streaming-text-completions \"Streaming text completions\")\n* [Chat completions sample](#chat-completions \"Chat completions\")\n* [Streaming chat completions sample](#streaming-chat-completions \"Streaming chat completions\")\n* [Embeddings sample](#text-embeddings \"Text Embeddings\")\n* [Image Generation sample](#image-generation \"Image Generation\")\n* [Audio Transcription sample](#audio-transcription \"Audio Transcription\")\n* [Audio Translation sample](#audio-translation \"Audio Translation\")\n\n### Legacy completions\n\nIt is generally preferable to use Chat Completions instead. However, Completions are still supported:\n\n``` java readme-sample-getCompletions\nList prompt = new ArrayList&lt;&gt;();\nprompt.add(\"Say this is a test\");\n\nCompletions completions = client.getCompletions(\"{deploymentOrModelName}\", new CompletionsOptions(prompt));\n\nSystem.out.printf(\"Model ID=%s is created at %s.%n\", completions.getId(), completions.getCreatedAt());\nfor (Choice choice : completions.getChoices()) {\n  System.out.printf(\"Index: %d, Text: %s.%n\", choice.getIndex(), choice.getText());\n}\n```\n\nFor a complete sample example, see sample [Text Completions][sample_get_completions].\n\n### Streaming legacy completions\n\n```java readme-sample-getCompletionsStream\nList prompt = new ArrayList&lt;&gt;();\nprompt.add(\"How to bake a cake?\");\n\nIterableStream completionsStream = client\n  .getCompletionsStream(\"{deploymentOrModelName}\", new CompletionsOptions(prompt));\n\ncompletionsStream\n  .stream()\n  // Remove .skip(1) when using Non-Azure OpenAI API\n  // Note: the first chat completions can be ignored when using Azure OpenAI service which is a known service bug.\n  // TODO: remove .skip(1) when service fix the issue.\n  .skip(1)\n  .forEach(completions -&gt; System.out.print(completions.getChoices().get(0).getText()));\n```\n\nFor a complete sample example, see sample [Streaming Text Completions][sample_get_completions_streaming].\n\n### Chat completions\n\n``` java readme-sample-getChatCompletions\nList chatMessages = new ArrayList&lt;&gt;();\nchatMessages.add(new ChatRequestSystemMessage(\"You are a helpful assistant. You will talk like a pirate.\"));\nchatMessages.add(new ChatRequestUserMessage(\"Can you help me?\"));\nchatMessages.add(new ChatRequestAssistantMessage(\"Of course, me hearty! What can I do for ye?\"));\nchatMessages.add(new ChatRequestUserMessage(\"What's the best way to train a parrot?\"));\n\nChatCompletions chatCompletions = client.getChatCompletions(\"{deploymentOrModelName}\",\n  new ChatCompletionsOptions(chatMessages));\n\nSystem.out.printf(\"Model ID=%s is created at %s.%n\", chatCompletions.getId(), chatCompletions.getCreatedAt());\nfor (ChatChoice choice : chatCompletions.getChoices()) {\n  ChatResponseMessage message = choice.getMessage();\n  System.out.printf(\"Index: %d, Chat Role: %s.%n\", choice.getIndex(), message.getRole());\n  System.out.println(\"Message:\");\n  System.out.println(message.getContent());\n}",
                    "title": "Azure OpenAI client library for Java",
                    "url": "https://openainewsdkteststorage.blob.core.windows.net/fileupload-openai-readmes-index/azure-java.md",
                    "filepath": "azure-java.md",
                    "chunk_id": "0"
                  },
                  {
                    "content": "For a complete sample example, see sample [Chat Completions][sample_get_chat_completions].\n\nFor `function call` sample, see [function call][sample_chat_completion_function_call]. However, they are considered \na legacy feature. Using tools is the preferred way. For more details see sample [tool calls][sample_tool_calls].\n\nFor `Bring Your Own Data` sample, see [Bring Your Own Data][sample_chat_completion_function_call].\n\nPlease refer to the service documentation for a conceptual discussion of [text completion][microsoft_docs_openai_completion].\n\n### Streaming chat completions\n\n```java readme-sample-getChatCompletionsStream\nList chatMessages = new ArrayList&lt;&gt;();\nchatMessages.add(new ChatRequestSystemMessage(\"You are a helpful assistant. You will talk like a pirate.\"));\nchatMessages.add(new ChatRequestUserMessage(\"Can you help me?\"));\nchatMessages.add(new ChatRequestAssistantMessage(\"Of course, me hearty! What can I do for ye?\"));\nchatMessages.add(new ChatRequestUserMessage(\"What's the best way to train a parrot?\"));\n\nclient.getChatCompletionsStream(\"{deploymentOrModelName}\", new ChatCompletionsOptions(chatMessages))\n  .forEach(chatCompletions -&gt; {\n  if (CoreUtils.isNullOrEmpty(chatCompletions.getChoices())) {\n  return;\n  }\n  ChatResponseMessage delta = chatCompletions.getChoices().get(0).getDelta();\n  if (delta.getRole() != null) {\n  System.out.println(\"Role = \" + delta.getRole());\n  }\n  if (delta.getContent() != null) {\n  String content = delta.getContent();\n  System.out.print(content);\n  }\n  });\n```\n\nTo compute tokens in streaming chat completions, see sample [Streaming Chat Completions][sample_get_chat_completions_streaming].\n\n### Text embeddings\n\n```java readme-sample-getEmbedding\nEmbeddingsOptions embeddingsOptions = new EmbeddingsOptions(\n  Arrays.asList(\"Your text string goes here\"));\n\nEmbeddings embeddings = client.getEmbeddings(\"{deploymentOrModelName}\", embeddingsOptions);\n\nfor (EmbeddingItem item : embeddings.getData()) {\n  System.out.printf(\"Index: %d.%n\", item.getPromptIndex());\n  for (Float embedding : item.getEmbedding()) {\n  System.out.printf(\"%f;\", embedding);\n  }\n}\n```\nFor a complete sample example, see sample [Embedding][sample_get_embedding].\n\nPlease refer to the service documentation for a conceptual discussion of [openAI embedding][microsoft_docs_openai_embedding].\n\n### Image Generation\n\n```java readme-sample-imageGeneration\nImageGenerationOptions imageGenerationOptions = new ImageGenerationOptions(\n  \"A drawing of the Seattle skyline in the style of Van Gogh\");\nImageGenerations images = client.getImageGenerations(\"{deploymentOrModelName}\", imageGenerationOptions);\n\nfor (ImageGenerationData imageGenerationData : images.getData()) {\n  System.out.printf(\n  \"Image location URL that provides temporary access to download the generated image is %s.%n\",\n  imageGenerationData.getUrl());\n}",
                    "title": "Azure OpenAI client library for Java",
                    "url": "https://openainewsdkteststorage.blob.core.windows.net/fileupload-openai-readmes-index/azure-java.md",
                    "filepath": "azure-java.md",
                    "chunk_id": "1"
                  }
                ],
                "intent": "[\"What does the term 'PR complete' mean?\"]"
              }
            }
          }
        ],
        "usage": {
          "prompt_tokens": 5215,
          "completion_tokens": 30,
          "total_tokens": 5245
        },
        "system_fingerprint": "fp_b2ffeb16ee"
      }
    }
  ],
  "Variables": {
    "RandomSeed": "1436189488"
  }
}
