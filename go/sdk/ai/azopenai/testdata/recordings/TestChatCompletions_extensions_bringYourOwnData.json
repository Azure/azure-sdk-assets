{
  "Entries": [
    {
      "RequestUri": "https://Sanitized.openai.azure.com/openai/deployments/gpt-4/chat/completions?api-version=2025-03-01-preview",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip",
        "Authorization": "Sanitized",
        "Content-Length": "296",
        "Content-Type": "application/json",
        "User-Agent": "fake-user-agent",
        "X-Stainless-Arch": "x64",
        "X-Stainless-Lang": "go",
        "X-Stainless-Os": "Linux",
        "X-Stainless-Package-Version": "1.2.1",
        "X-Stainless-Retry-Count": "0",
        "X-Stainless-Runtime": "go",
        "X-Stainless-Runtime-Version": "go1.24.3"
      },
      "RequestBody": {
        "messages": [
          {
            "content": "What does the OpenAI package do?",
            "role": "user"
          }
        ],
        "model": "gpt-4",
        "max_tokens": 512,
        "data_sources": [
          {
            "parameters": {
              "authentication": {
                "type": "system_assigned_managed_identity"
              },
              "endpoint": "https://Sanitized.openai.azure.com",
              "index_name": "index"
            },
            "type": "azure_search"
          }
        ]
      },
      "StatusCode": 200,
      "ResponseHeaders": {
        "apim-request-id": "f62b7a52-fe92-4f17-9792-dff5b0ac9239",
        "Connection": "keep-alive",
        "Content-Length": "14213",
        "Content-Type": "application/json; charset=UTF-8",
        "Date": "Mon, 02 Jun 2025 23:03:29 GMT",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains; preload",
        "X-Content-Type-Options": "nosniff",
        "x-envoy-upstream-service-time": "9668",
        "x-ms-client-request-id": "Sanitized",
        "x-ms-deployment-name": "gpt-4",
        "x-ms-region": "East US",
        "x-ratelimit-limit-requests": "250",
        "x-ratelimit-limit-tokens": "250000",
        "x-ratelimit-remaining-requests": "249",
        "x-ratelimit-remaining-tokens": "249479"
      },
      "ResponseBody": {
        "id": "Sanitized",
        "model": "gpt-4",
        "created": 1748905409,
        "object": "extensions.chat.completion",
        "choices": [
          {
            "index": 0,
            "finish_reason": "stop",
            "message": {
              "role": "assistant",
              "content": "The OpenAI package provides a set of libraries that facilitate access to the OpenAI REST API from various programming environments. These libraries are designed to help developers integrate OpenAI's capabilities, such as text generation, image generation, and other AI functionalities, into their applications. Each library supports specific programming languages and environments, ensuring that developers can work within their preferred tools and frameworks.\n\nFor instance, the OpenAI Node API library supports environments like Node.js, Deno, and Cloudflare Workers, and follows Semantic Versioning to ensure compatibility and smooth upgrades [doc1]. The OpenAI .NET API library, generated in collaboration with Microsoft, offers access from .NET applications and includes features like chat completions and text embeddings [doc2]. Similarly, the OpenAI Python API library provides additional options for integration with Azure services and supports Python 3.7 or higher [doc3].\n\nThese libraries are equipped with various functionalities to handle different aspects of the OpenAI API, including handling API keys, managing requests, and processing responses. They are essential tools for developers looking to leverage OpenAI's advanced AI models in their software applications.",
              "end_turn": true,
              "context": {
                "citations": [
                  {
                    "content": "## Semantic versioning\n\nThis package generally follows [SemVer](https://semver.org/spec/v2.0.0.html) conventions, though certain backwards-incompatible changes may be released as minor versions:\n\n1. Changes that only affect static types, without breaking runtime behavior.\n2. Changes to library internals which are technically public but not intended or documented for external use. _(Please open a GitHub issue to let us know if you are relying on such internals)_.\n3. Changes that we do not expect to impact the vast majority of users in practice.\n\nWe take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.\n\nWe are keen for your feedback; please open an [issue](https://www.github.com/openai/openai-node/issues) with questions, bugs, or suggestions.\n\n## Requirements\n\nTypeScript &gt;= 4.5 is supported.\n\nThe following runtimes are supported:\n\n- Node.js 18 LTS or later ([non-EOL](https://endoflife.date/nodejs)) versions.\n- Deno v1.28.0 or higher, using `import OpenAI from \"npm:openai\"`.\n- Bun 1.0 or later.\n- Cloudflare Workers.\n- Vercel Edge Runtime.\n- Jest 28 or greater with the `\"node\"` environment (`\"jsdom\"` is not supported at this time).\n- Nitro v2.6 or greater.\n\nNote that React Native is not supported at this time.\n\nIf you are interested in other runtime environments, please open or upvote an issue on GitHub.",
                    "title": "OpenAI Node API Library",
                    "url": "https://openainewsdkteststorage.blob.core.windows.net/fileupload-openai-readmes-index/javascript.md",
                    "filepath": "javascript.md",
                    "chunk_id": "2"
                  },
                  {
                    "content": "# OpenAI .NET API library\n\n[![NuGet version](https://img.shields.io/nuget/vpre/openai.svg)](https://www.nuget.org/packages/OpenAI/absoluteLatest)\n\nThe OpenAI .NET library provides convenient access to the OpenAI REST API from .NET applications. \n\nIt is generated from our [OpenAPI specification](https://github.com/openai/openai-openapi) in collaboration with Microsoft.\n\n## Table of Contents\n\n- [Getting started](#getting-started)\n  - [Prerequisites](#prerequisites)\n  - [Install the NuGet package](#install-the-nuget-package)\n- [Using the client library](#using-the-client-library)\n  - [Namespace organization](#namespace-organization)\n  - [Using the async API](#using-the-async-api)\n  - [Using the `OpenAIClient` class](#using-the-openaiclient-class)\n- [How to use chat completions with streaming](#how-to-use-chat-completions-with-streaming)\n- [How to use chat completions with tools and function calling](#how-to-use-chat-completions-with-tools-and-function-calling)\n- [How to generate text embeddings](#how-to-generate-text-embeddings)\n- [How to generate images](#how-to-generate-images)\n- [How to transcribe audio](#how-to-transcribe-audio)\n- [How to use assistants with retrieval augmented generation (RAG)](#how-to-use-assistants-with-retrieval-augmented-generation-rag)\n- [How to use streaming and GPT-4o vision with assistants](#how-to-use-streaming-and-gpt-4o-vision-with-assistants)\n- [How to work with Azure OpenAI](#how-to-work-with-azure-openai)\n- [Advanced scenarios](#advanced-scenarios)\n  - [Using protocol methods](#using-protocol-methods)\n  - [Automatically retrying errors](#automatically-retrying-errors)\n\n## Getting started\n\n### Prerequisites\n\nTo call the OpenAI REST API, you will need an API key. To obtain one, first [create a new OpenAI account](https://platform.openai.com/signup) or [log in](https://platform.openai.com/login). Next, navigate to the [API key page](https://platform.openai.com/account/api-keys) and select \"Create new secret key\", optionally naming the key. Make sure to save your API key somewhere safe and do not share it with anyone.\n\n### Install the NuGet package\n\nAdd the client library to your .NET project with [NuGet](https://www.nuget.org/) using your IDE or the dotnet CLI:\n\n```cli\ndotnet add package OpenAI --prerelease\n```\n\nNote that the code examples included below were written using [.NET 8](https://dotnet.microsoft.com/download/dotnet/8.0). The OpenAI .NET library is compatible with all .NET Standard 2.0 applications but some code examples in this document may depend on newer language features.\n\n## Using the client library\n\nThe full API of this library can be found in the [api.md](https://github.com/openai/openai-dotnet/blob/main/api/api.md) file, and there are many [code examples](https://github.com/openai/openai-dotnet/tree/main/examples) to help. For instance, the following snippet illustrates the basic use of the chat completions API:\n\n```csharp\nusing OpenAI.Chat;\n\nChatClient client = new(model: \"gpt-4o\", Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\"));\n\nChatCompletion completion = client.CompleteChat(\"Say 'this is a test.'\");\n\nConsole.WriteLine($\"[ASSISTANT]: {completion}\");",
                    "title": "OpenAI .NET API library",
                    "url": "https://openainewsdkteststorage.blob.core.windows.net/fileupload-openai-readmes-index/dotnet.md",
                    "filepath": "dotnet.md",
                    "chunk_id": "0"
                  },
                  {
                    "content": "In addition to the options provided in the base `OpenAI` client, the following options are provided:\n\n- `azure_endpoint` (or the `AZURE_OPENAI_ENDPOINT` environment variable)\n- `azure_deployment`\n- `api_version` (or the `OPENAI_API_VERSION` environment variable)\n- `azure_ad_token` (or the `AZURE_OPENAI_AD_TOKEN` environment variable)\n- `azure_ad_token_provider`\n\nAn example of using the client with Microsoft Entra ID (formerly known as Azure Active Directory) can be found [here](https://github.com/openai/openai-python/blob/main/examples/azure_ad.py).\n\n## Versioning\n\nThis package generally follows [SemVer](https://semver.org/spec/v2.0.0.html) conventions, though certain backwards-incompatible changes may be released as minor versions:\n\n1. Changes that only affect static types, without breaking runtime behavior.\n2. Changes to library internals which are technically public but not intended or documented for external use. _(Please open a GitHub issue to let us know if you are relying on such internals)_.\n3. Changes that we do not expect to impact the vast majority of users in practice.\n\nWe take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.\n\nWe are keen for your feedback; please open an [issue](https://www.github.com/openai/openai-python/issues) with questions, bugs, or suggestions.\n\n## Requirements\n\nPython 3.7 or higher.",
                    "title": "OpenAI Python API library",
                    "url": "https://openainewsdkteststorage.blob.core.windows.net/fileupload-openai-readmes-index/python.md",
                    "filepath": "python.md",
                    "chunk_id": "0"
                  },
                  {
                    "content": "### How to tell whether `None` means `null` or missing\n\nIn an API response, a field may be explicitly `null`, or missing entirely; in either case, its value is `None` in this library. You can differentiate the two cases with `.model_fields_set`:\n\n```py\nif response.my_field is None:\n  if 'my_field' not in response.model_fields_set:\n  print('Got json like {}, without a \"my_field\" key present at all.')\n  else:\n  print('Got json like {\"my_field\": null}.')\n```\n\n### Accessing raw response data (e.g. headers)\n\nThe \"raw\" Response object can be accessed by prefixing `.with_raw_response.` to any HTTP method call, e.g.,\n\n```py\nfrom openai import OpenAI\n\nclient = OpenAI()\nresponse = client.chat.completions.with_raw_response.create(\n  messages=[{\n  \"role\": \"user\",\n  \"content\": \"Say this is a test\",\n  }],\n  model=\"gpt-3.5-turbo\",\n)\nprint(response.headers.get('X-My-Header'))\n\ncompletion = response.parse()  # get the object that `chat.completions.create()` would have returned\nprint(completion)\n```\n\nThese methods return an [`LegacyAPIResponse`](https://github.com/openai/openai-python/tree/main/src/openai/_legacy_response.py) object. This is a legacy class as we're changing it slightly in the next major version.\n\nFor the sync client this will mostly be the same with the exception\nof `content` &amp; `text` will be methods instead of properties. In the\nasync client, all methods will be async.\n\nA migration script will be provided &amp; the migration in general should\nbe smooth.\n\n#### `.with_streaming_response`\n\nThe above interface eagerly reads the full response body when you make the request, which may not always be what you want.\n\nTo stream the response body, use `.with_streaming_response` instead, which requires a context manager and only reads the response body once you call `.read()`, `.text()`, `.json()`, `.iter_bytes()`, `.iter_text()`, `.iter_lines()` or `.parse()`. In the async client, these are async methods.\n\nAs such, `.with_streaming_response` methods return a different [`APIResponse`](https://github.com/openai/openai-python/tree/main/src/openai/_response.py) object, and the async client returns an [`AsyncAPIResponse`](https://github.com/openai/openai-python/tree/main/src/openai/_response.py) object.\n\n```python\nwith client.chat.completions.with_streaming_response.create(\n  messages=[\n  {\n  \"role\": \"user\",\n  \"content\": \"Say this is a test\",\n  }\n  ],\n  model=\"gpt-3.5-turbo\",\n) as response:\n  print(response.headers.get(\"X-My-Header\"))\n\n  for line in response.iter_lines():\n  print(line)",
                    "title": "OpenAI Python API library",
                    "url": "https://openainewsdkteststorage.blob.core.windows.net/fileupload-openai-readmes-index/python.md",
                    "filepath": "python.md",
                    "chunk_id": "1"
                  },
                  {
                    "content": "### Support for non-Azure OpenAI\n\nThe SDK also supports operating against the public non-Azure OpenAI. The response models remain the same, only the\nsetup of the `OpenAIClient` is slightly different. First, get Non-Azure OpenAI API key from\n[Open AI authentication API keys][non_azure_openai_authentication]. Then setup your `OpenAIClient` as follows: \n\n```java readme-sample-createNonAzureOpenAISyncClientApiKey\nOpenAIClient client = new OpenAIClientBuilder()\n  .credential(new KeyCredential(\"{openai-secret-key}\"))\n  .buildClient();\n```\nor \n\n```java readme-sample-createNonAzureOpenAIAsyncClientApiKey\nOpenAIAsyncClient client = new OpenAIClientBuilder()\n  .credential(new KeyCredential(\"{openai-secret-key}\"))\n  .buildAsyncClient();\n```\n\n#### Create an Azure OpenAI client with Azure Active Directory credential\nAzure SDK for Java supports an Azure Identity package, making it easy to get credentials from Microsoft identity\nplatform.\n\nAuthentication with AAD requires some initial setup:\n* Add the Azure Identity package\n\n[//]: # ({x-version-update-start;com.azure:azure-identity;dependency})\n```xml\n\ncom.azure\nazure-identity\n1.12.2\n\n```\n[//]: # ({x-version-update-end})\n\nAfter setup, you can choose which type of [credential][azure_identity_credential_type] from azure.identity to use.\nAs an example, [DefaultAzureCredential][wiki_identity] can be used to authenticate the client:\nSet the values of the client ID, tenant ID, and client secret of the AAD application as environment variables:\n`AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_SECRET`.\n\nAuthorization is easiest using [DefaultAzureCredential][wiki_identity]. It finds the best credential to use in its\nrunning environment. For more information about using Azure Active Directory authorization with OpenAI service, please\nrefer to [the associated documentation][aad_authorization].\n\n```java readme-sample-createOpenAIClientWithAAD\nTokenCredential defaultCredential = new DefaultAzureCredentialBuilder().build();\nOpenAIClient client = new OpenAIClientBuilder()\n  .credential(defaultCredential)\n  .endpoint(\"{endpoint}\")\n  .buildClient();\n```\n\n#### Create a client with proxy options\nCreate an OpenAI client with proxy options.\n```java readme-sample-createOpenAIClientWithProxyOption\n// Proxy options\nfinal String hostname = \"{your-host-name}\";\nfinal int port = 447; // your port number\n\nProxyOptions proxyOptions = new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(hostname, port))\n  .setCredentials(\"{username}\", \"{password}\");\n\nOpenAIClient client = new OpenAIClientBuilder()\n  .credential(new AzureKeyCredential(\"{key}\"))\n  .endpoint(\"{endpoint}\")\n  .clientOptions(new HttpClientOptions().setProxyOptions(proxyOptions))\n  .buildClient();",
                    "title": "Azure OpenAI client library for Java",
                    "url": "https://openainewsdkteststorage.blob.core.windows.net/fileupload-openai-readmes-index/azure-java.md",
                    "filepath": "azure-java.md",
                    "chunk_id": "0"
                  }
                ],
                "intent": "[\"What does the OpenAI package do?\", \"Functions of OpenAI package\", \"Overview of OpenAI package capabilities\"]"
              }
            }
          }
        ],
        "usage": {
          "prompt_tokens": 5548,
          "completion_tokens": 248,
          "total_tokens": 5796
        },
        "system_fingerprint": "fp_5603ee5e2e"
      }
    }
  ],
  "Variables": {}
}
