{
  "Entries": [
    {
      "RequestUri": "https://Sanitized.openai.azure.com/openai/deployments/gpt-4-turbo/chat/completions?api-version=2024-07-01-preview",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "api-key": "Sanitized",
        "Content-Length": "365",
        "Content-Type": "application/json",
        "User-Agent": "azsdk-net-AI.OpenAI/2.0.0-alpha.20240812.1 (.NET 8.0.7; Microsoft Windows 10.0.22631)",
        "x-ms-client-request-id": "Sanitized"
      },
      "RequestBody": {
        "messages": [
          {
            "role": "user",
            "content": "What does the term 'PR complete' mean?"
          }
        ],
        "model": "gpt-4-turbo",
        "stream": true,
        "data_sources": [
          {
            "parameters": {
              "allow_partial_result": true,
              "endpoint": "https://Sanitized.search.windows.net/",
              "index_name": "openaiwikisearchindex",
              "authentication": {
                "key": "Sanitized",
                "type": "api_key"
              },
              "query_type": "simple"
            },
            "type": "azure_search"
          }
        ]
      },
      "StatusCode": 200,
      "ResponseHeaders": {
        "apim-request-id": "dd70deac-898b-4808-975c-966f72b704df",
        "Cache-Control": "no-cache",
        "Content-Type": "text/event-stream",
        "Date": "Mon, 12 Aug 2024 23:22:00 GMT",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains; preload",
        "Transfer-Encoding": "chunked",
        "X-Content-Type-Options": "nosniff",
        "x-envoy-upstream-service-time": "3883",
        "x-ms-client-request-id": "Sanitized",
        "x-ms-region": "Sweden Central",
        "x-ratelimit-remaining-requests": "65",
        "x-ratelimit-remaining-tokens": "58342"
      },
      "ResponseBody": [
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"context\":{\"citations\":[{\"content\":\"<h1>Development</h1>\\n<h2>Per language in depth guides</h2>\\n\\n<a href=\\\"dev_docs/dotnet.md\\\">.NET</a>\\n<a href=\\\"dev_docs/java.md\\\">Java</a>\\n\\n<h2>Approach overview</h2>\\n<p>This space moves fast and we need to be able to react quickly to new features, new SDK language requirements, new Azure feature integrations, and new \\\"things we don't even know about yet.\\\"</p>\\n<p>To facilitate that, we've partnered with Azure DevDiv to use their code generation ecosystem, built around a language and related tools called typespec (formerly cadl), as the basis for how AOAI SDK code is produced.</p>\\n<p>https://microsoft.github.io/typespec/</p>\\n<p>The idea here is:\\n- Together with the service teams, REST contracts are authored as typespec files\\n- Language-specific SDKs ingest emitted code from these typespec sources as a \\\"generated\\\" base\\n- Those SDKs can then add custom code when needed to facilitate specialized or language-specific functionality -- or to tailor the code generation step itself</p>\\n\\nAs an elaboration of that last part, code generation has a bidirectional, mutually-informative relationship with custom code: adding fields or methods to custom code (e.g. with custom visibility or implementation) will suppress/replace code generation, meaning language-specific SDKs still have a great deal of freedom.\\n\\n<p>And the goals of that?\\n- Less time is spent writing and maintaining non-scenario-focused, boilerplate code around things like authentication, basic network I/O, etc.\\n- We get the latest and greatest integration with Azure.Core \\\"for free\\\" as code gen is updated\\n- We can respond to changes much more quickly since code generation can do most (or all!) of the work for us</p>\\n<p>But, it's important to keep in mind:\\n- We should never author API surfaces a certain way \\\"because that's what code generation does.\\\" Codegen may give us a solid basis derived from guidelines and best practices, but we ultimately must still do what we think is correct for customers!\\n- If/when we discover gaps or mismatches or we just get blocked, it's OK for us to implement new things in their intended forms as custom code to begin with; the idea is for tooling and process to help and accelerate us, not slow us down or contrain us</p>\\n\\nThat said, the more custom code we adopt the slower we can move and the more we maintain, so every effort should be made to translate custom code to codegen ASAP where applicable and reasonable\\n\\n<h2>Repos of interest</h2>\\n<p>The typespec repository is what define what code generation will output for a new language SDK:</p>\\n\\n\\n<p><a href=\\\"https://github.com/Azure/azure-rest-api-specs\\\">Azure Rest API Spec</a>. In this repository we are particularly interested in two paths:</p>\\n\\n\\n<p>specification/cognitiveservices/OpenAI.Inference: contains the typespec specification for this service.</p>\\n\\nspecification/cognitiveservices/data-plane/AzureOpenAI: contains the swagger JSON definition for the SDK service. As of the writing of this document we are only concerned with the inference where you will find the stable and preview folders containing the corresponding release version of the channel they are named after.\\n\\n<p>Repositories for each supported languages (list could be outdated)</p>\\n\\n\\n<p><a href=\\\"https://github.com/Azure/azure-sdk-for-net\\\">Azure SDK for .NET</a>. In this repository we are interested in a couple of paths too:</p>\\n\\n\\n<p>sdk/openai/ contains the code for the SDK. Specifically within Azure.AI.OpenAI you will find the source code and tests.</p>\\n\\n\\n<p>eng/scripts contains PowerShell scripts that you will have to generally run whenever you open a PR.</p>\\n\\n\\n<p><a href=\\\"https://github.com/Azure/azure-sdk-for-java\\\">Azure SDK for Java</a></p>\\n\\n\\n<p>At the time of this writing, the SDK is not merged into main yet. You can find the current development under this <a href=\\\"https://github.com/Azure/azure-sdk-for-java/tree/feature/open-ai/sdk/openai\\\">branch</a></p>\\n\\n\",\"title\":\"Development\",\"url\":null,\"filepath\":\"development.md\",\"chunk_id\":\"0\"},{\"content\":\"<h2>Introduction</h2>\\n<p>The full list of steps are listed here in the <a href=\\\"https://dev.azure.com/azure-sdk/internal/_wiki/wikis/internal.wiki/8/Release-Checklist\\\">Release Check list for Azure SDK for .NET</a> guide.</p>\\n<h2>Steps</h2>\\n\\nFrom your main up-to-date branch of the azure-sdk-for-net run the following command:\\n\\n<pre>.\\\\eng\\\\common\\\\scripts\\\\Prepare-Release.ps1 -PackageName Azure.AI.OpenAI -ServiceDirectory openai -ReleaseDate 2/8/2023\\n</pre>\\n\\nYou will be prompted about the name of the release. The default is generally always good, as upon completing the release there will be an auto complete PR opened updating the value for the next. In this case:\\n\\n<pre>Input the new version, or press Enter to use use current project version '1.0.0-beta.2':\\n</pre>\\n\\n\\n<p>You will be asked to install azure-cli if you don't have it installed. Follow the link suggestion, install and reopen your terminal and re-run the command. Accepting the name for the release will then prompt you to login with your work account for the azure-cli</p>\\n\\n\\n<p>The script will then link an issue that will be automatically created for the release. Open it.</p>\\n\\n\\n<p>Find your commit for the release in the pipeline list found in Pipelines - Runs for net - openai (azure.com)</p>\\n\\n\\n<p>You will need access (manager approved) to the group of approvers. It can be requested from this <a href=\\\"https://aka.ms/azsdk/join/azuresdkpartners\\\">link</a></p>\\n\\n\\n<p><strong>TODO</strong> Despite being part of the group we are not able to approve releases.</p>\\n\\n\\n<p>In the pipeline, approve the release, hitting \\\"Run new\\\" (the pipeline needs to be launched manually.)</p>\\n\\n\\n<p>You will be prompted to select a branch and supply a commit. Simply leaving the branch to \\\"main\\\" (provided that all your changes are in there) and the commit blank, will use HEAD and continue on with the deployment.</p>\\n\\n\\n<p>Your manually launched pipeline should look like this:</p>\\n\\n\\n<p><img src=\\\"./aoai_inference_deployment_pipeline.png\\\"/></p>\\n\\nThe pipeline will pause in the Release: Azure.AI.OpenAI step where you need to hit the Approve button (See the <strong>TODO</strong> above. We need to setup this still.)\\n\",\"title\":\"Introduction\",\"url\":null,\"filepath\":\"deployment.md\",\"chunk_id\":\"0\"},{\"content\":\"<p>- Commit your changes to the `tsp-location.yaml` file\\n- You can run the PR checks locally using the following PowerShell script (__Remember to use `pwsh` for this__):powershell\\n ......\\\\eng\\\\scripts\\\\CodeChecks.ps1 -ServiceDirectory openai\\n ```\\n- Create a pull request into the <a href=\\\"https://github.com/Azure/azure-sdk-for-net\\\">.Net (Azure/azure-sdk-for-net)</a> repo\\n- Complete the PR process</p>\\n<h2>Refreshing test recording JSON</h2>\\n<p><strong>TBD</strong></p>\",\"title\":\"Dev notes\",\"url\":null,\"filepath\":\"dev_docs\\\\dotnet.md\",\"chunk_id\":\"1\"},{\"content\":\"Speeding up the TypeSpec development cycle (potential for loss of changes)\\n<p>If you need to iterate quickly on TypeSpec changes and don't mind some additional manual steps, you can follow these instructions instead:</p>\\n\\n<strong>CAUTION:</strong> While using this method:\\nAny changes you make in the TempTypeSpecFiles\\\\OpenAI.Inference subfolder are <strong>ignored</strong> by source control\\nRunning dotnet build /t:GenerateCommand will overwrite your changes. You should only use the tsp compile ... command to regenerate until you have copied your changes into your sparse-spec TypeSpec repo clone (sparse-spec\\\\Azure.AI.OpenAI)\\nFrom the command line, re-generate the auto generated C# code using the following: dotnet build /t:GenerateCode /p:SaveInputs=true\\nPlease note the additional /p:SaveInputs=True. This will instruct the generation scripts to keep the temporary folders and files it uses\\nThe temporary files can be found in the sdk\\\\openai\\\\Azure.AI.OpenAI\\\\TempTypeSpecFiles\\\\OpenAI.Inference subfolder\\nPlease note the tsp compile command that is echoed during the build and copy and save that (without the npx). In my case the command was tsp compile C:\\\\azure-sdk-for-net\\\\sdk\\\\openai\\\\Azure.AI.OpenAI\\\\TempTypeSpecFiles\\\\OpenAI.Inference\\\\main.tsp --emit @azure-tools/typespec-csharp --option @azure-tools/typespec-csharp.emitter-output-dir=C:\\\\azure-sdk-for-net\\\\sdk\\\\openai\\\\Azure.AI.OpenAI\\\\src\\nOpen up the following folder in VSCode: sdk\\\\openai\\\\Azure.AI.OpenAI\\\\TempTypeSpecFiles\\\\OpenAI.Inference\\nMake the changes you need to the Typespec files\\nTo re-generate the C# code, in your .Net repo copy and paste the command you saved earlier (tsp compile ...)\\nIf you see warnings/errors about a mismatched tsp version, try navigating to the advised folder (e.g. TempTypeSpecFiles\\\\OpenAI.Inference) and try again\\nOnce you're happy with how the local, temp TypeSpec change are behaving, move them into your sparse-spec TypeSpec repo clone (sparse-spec\\\\Azure.AI.OpenAI)\\n\\nCommitting the changes\\n\\nOnce you're happy with the way your TypeSpec changes are behaving, commit them to your fork/topic branch in the TypeSpec sparse repo clone\\nCreate and merge a PR of your changes into the <a href=\\\"https://github.com/Azure/azure-rest-api-specs\\\">TypeSpec (Azure/azure-rest-api-specs)</a> repo\\n<strong>Note: This PR process into the TypeSpec repo must be completed before proceeding to the next steps</strong>\\nGo back to your .Net repo and update the commit referenced in sdk\\\\openai\\\\Azure.AI.OpenAI\\\\tsp-location.yaml to match the commit you just made to TypeSpec repo\\nRegenerate and rebuild the C# code using the full dotnet build /t:GenerateCode,GenerateTests,Build /p:UpdateSourceOnBuild=true flow to pick up your changes\\nYou can manually update the snippets, and API exports using PowerShell core (pwsh) (NOT the built in Windows Powershell):\\n ```powershell\\n ......\\\\eng\\\\scripts\\\\Export-API.ps1 -ServiceDirectory openai\\n ......\\\\eng\\\\scripts\\\\Update-Snippets.ps1 -ServiceDirectory openai\\n\",\"title\":\"Dev notes\",\"url\":null,\"filepath\":\"dev_docs\\\\dotnet.md\",\"chunk_id\":\"0\"},{\"content\":\"<p>```</p>\\n\\n<p>Be sure to check that records have correctly been sanitized before adding new records to the repo. More info <a href=\\\"https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core.TestFramework/README.md#sanitizing\\\">here</a>. Bear in mind that sanitization is not a manual process. The tool should do this for you.</p>\\n\\n<h1>Service principal</h1>\\n<p>What is it?\\nHow do we use it?</p>\\n<h2>Integration of service principal with tests</h2>\\n<p>tbd</p>\\n<h1>Testing approach</h1>\\n<h2>Usage limits</h2>\\n\\n<p>(June 8 2023) Currently, due to demand issues, we have limited tokens for requests.</p>\\n\\n<p>During these early stages of development, we'll need to be mindful of testing practices around live service calls. We don't have a quantitative guide, but general ideas like \\\"don't run live testing in a loop, prefer playback and reuse session records when there are no request/response changes, and schedule automated live runs for off-peak times\\\" all apply.</p>\\n\\n<p>(June 8 2023) Our subscription is exempted from the strict throttling right now, listed as business critical to not have a one request per minute limit but it'll still occasionally hit shared capacity issues. \\\"Be reasonable\\\" in test runs</p>\\n\\n<h2>What should ultimately be tested?</h2>\\n<p>We should have tests that mimic the user flow, meaning all the way from deployment of resource to request and assertion of returned payload</p>\\n<h1>Scripts of interest (Travis's for AAD)</h1>\\n<p>Travis's <a href=\\\"https://msasg.visualstudio.com/Skyman/_git/Carbon?path=/scripts/Set-AzureOpenAI-Test-Recording-Settings.ps1\\\">script</a> to setup all the environment variables to our test principal. Then you will only need to set in your environment the AZURE_OPENAI_ENDPOINT to be able to run tests in either RECORD or LIVE mode.</p>\\n<h1>Known language feature gaps</h1>\\n<h2>Java SDK</h2>\\n\\nrecording sessions, not using TestProxy\\ntracking item in ADO: https://dev.azure.com/project-argos/Sorento/_workitems/edit/8626/\\nclient libraries in azure-sdk-for-java have an ongoing task to migrate to use Test Proxy <a href=\\\"https://github.com/Azure/azure-sdk-for-java/wiki/Test-Proxy-Migration#3-using-test-proxy-going-forward\\\">per the instructions here</a>\\n\\n\\n\\n<h2>.NET SDK</h2>\\n<pre>tbd\\n</pre>\\n<h1>Related reading</h1>\\n<pre>tbd\\n</pre>\",\"title\":\"Overview\",\"url\":null,\"filepath\":\"dev_docs\\\\TestingOverview.md\",\"chunk_id\":\"1\"}],\"intent\":\"[\\\"What does the term 'PR complete' mean?\\\", \\\"Definition of PR complete\\\", \\\"Meaning of PR complete\\\"]\"}},\"end_turn\":false,\"finish_reason\":null}]}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\"The\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" requested\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" information\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" is\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" not\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" available\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" in\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" the\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" retrieved\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" data\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\".\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" Please\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" try\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" another\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" query\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" or\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\" topic\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{\"content\":\".\"},\"end_turn\":false,\"finish_reason\":null}],\"system_fingerprint\":\"fp_811936bd4f\"}\n\n",
        "data: {\"id\":\"8aa7c29c-8091-48c4-90f1-fb1c6aa49828\",\"model\":\"gpt-4\",\"created\":1723504920,\"object\":\"extensions.chat.completion.chunk\",\"choices\":[{\"index\":0,\"delta\":{},\"end_turn\":true,\"finish_reason\":\"stop\"}]}\n\n",
        "data: [DONE]\n\n"
      ]
    }
  ],
  "Variables": {
    "RandomSeed": "1356797462"
  }
}
