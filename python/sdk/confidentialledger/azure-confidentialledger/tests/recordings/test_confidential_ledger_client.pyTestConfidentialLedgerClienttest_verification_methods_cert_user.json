{
  "Entries": [
    {
      "RequestUri": "https://Sanitized.confidential-ledger.core.azure.com/ledgerIdentity/fake?api-version=2024-12-09-preview",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-confidentialledger-certificate/1.2.0b1 Python/3.13.3 (Windows-11-10.0.26100-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Connection": "keep-alive",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 22 Apr 2025 18:22:44 GMT",
        "Transfer-Encoding": "chunked",
        "x-azure-ref": "Sanitized",
        "X-Cache": "CONFIG_NOCACHE",
        "x-ms-correlation-request-id": "08f57ced-916e-48af-b1a8-50edb6b303cd",
        "x-ms-image-tag": "1.0.03020.245-cd77d0d5c8109fe7bf9e3ea1e1bb58b23d8a69d4",
        "x-ms-machineName": "identityservice-774866d8dd-6pwgd"
      },
      "ResponseBody": {
        "ledgerTlsCertificate": "-----BEGIN CERTIFICATE-----\nMIIBgTCCASagAwIBAgIQVGUWh13toT0jiyfR8VP2ETAKBggqhkjOPQQDAjAWMRQw\nEgYDVQQDDAtDQ0YgU2VydmljZTAeFw0yNTAzMzExNjI5NTZaFw0yNTA2MjkxNjI5\nNTVaMBYxFDASBgNVBAMMC0NDRiBTZXJ2aWNlMFkwEwYHKoZIzj0CAQYIKoZIzj0D\nAQcDQgAEexCqiXHb14I+pNKSE3Iqzbr5KZVmquEKMeuRmC1wKOXnZxkauqhTX+Dl\nOJCz58GH+iY0mOD/gIUAFhZyLW7ibqNWMFQwEgYDVR0TAQH/BAgwBgEB/wIBATAd\nBgNVHQ4EFgQUHuOeoTbmEsOEuPYIoGkirKQOytowHwYDVR0jBBgwFoAUHuOeoTbm\nEsOEuPYIoGkirKQOytowCgYIKoZIzj0EAwIDSQAwRgIhAK9ScZ8UpOBkgJutIYMM\nFSP6iqY630s55w47BE/5qLHpAiEA3Q0B8Rb793gMxqv6dw1rlM2V5AyJJidb/97X\n/EbqQJY=\n-----END CERTIFICATE-----\n",
        "ledgerId": "fake"
      }
    },
    {
      "RequestUri": "https://Sanitized.confidential-ledger.azure.com/app/ledgerUsers/5F:23:3D:26:E2:28:88:9C:06:E0:88:21:FA:C7:B2:9A:F8:81:30:6B:F9:15:41:F2:34:05:05:44:4C:AD:5A:B5?api-version=2024-12-09-preview",
      "RequestMethod": "PATCH",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "36",
        "Content-Type": "application/merge-patch+json",
        "User-Agent": "azsdk-python-confidentialledger/1.2.0b1 Python/3.13.3 (Windows-11-10.0.26100-SP0)"
      },
      "RequestBody": {
        "assignedRoles": [
          "Administrator"
        ]
      },
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "142",
        "x-ms-ccf-transaction-id": "25.4459"
      },
      "ResponseBody": "eyJhc3NpZ25lZFJvbGVzIjpbIkFkbWluaXN0cmF0b3IiXSwidXNlcklkIjoiNUY6MjM6M0Q6MjY6RTI6Mjg6ODg6OUM6MDY6RTA6ODg6MjE6RkE6Qzc6QjI6OUE6Rjg6ODE6MzA6NkI6Rjk6MTU6NDE6RjI6MzQ6MDU6MDU6NDQ6NEM6QUQ6NUE6QjUifQ=="
    },
    {
      "RequestUri": "https://Sanitized.confidential-ledger.azure.com/app/governance/members?api-version=2024-12-09-preview",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-confidentialledger/1.2.0b1 Python/3.13.3 (Windows-11-10.0.26100-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "801",
        "Content-Type": "application/json",
        "x-ms-ccf-transaction-id": "25.4460"
      },
      "ResponseBody": {
        "members": [
          {
            "certificate": "-----BEGIN CERTIFICATE-----\nMIIB9jCCAX2gAwIBAgIQd5imW7/GR9ukdPVUOxx7IjAKBggqhkjOPQQDAzAgMR4w\nHAYDVQQDExVDQ0YgR292ZXJub3IgSWRlbnRpdHkwHhcNMjUwMzMxMTcxOTI0WhcN\nMjUwNjMwMTcyOTI0WjAgMR4wHAYDVQQDExVDQ0YgR292ZXJub3IgSWRlbnRpdHkw\ndjAQBgcqhkjOPQIBBgUrgQQAIgNiAASf0aKS394NzR16dY+ukdJZiEjDdFKG9JH4\neAASCoikk37FAHpLn1ssehT4qLhZ4bC5APZThZYvomfkOnwZxBe1mfKP53x1nq3n\n9xYuU73OoX9/4HiHdoeNAjFlXt3L+PSjfDB6MA4GA1UdDwEB/wQEAwIHgDAJBgNV\nHRMEAjAAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAfBgNVHSMEGDAW\ngBT7WGhX49IwXLipqA/kP2V0sDQPwDAdBgNVHQ4EFgQU+1hoV+PSMFy4qagP5D9l\ndLA0D8AwCgYIKoZIzj0EAwMDZwAwZAIwf+UElX4DP6tkJxWxc3vscrX9djCvnGZ0\ndi/DHD3/sM6hGtSpV2hZijUsUOB4UJJ/AjBmqdZd/P/I0Uvee3kTQ7aRLB33JejO\nyXw/ZwSuNFyx+CPRoGSMf3jvCvHZnZlabRc=\n-----END CERTIFICATE-----",
            "id": "Sanitized"
          }
        ]
      }
    },
    {
      "RequestUri": "https://Sanitized.confidential-ledger.azure.com/app/governance/constitution?api-version=2024-12-09-preview",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-confidentialledger/1.2.0b1 Python/3.13.3 (Windows-11-10.0.26100-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "59088",
        "Content-Type": "application/json",
        "x-ms-ccf-transaction-id": "25.4460"
      },
      "ResponseBody": {
        "digest": "d7aaade629d9a64cbde51ea2f9d98bc1fe2fe6b5b6bdf76c3d13596ca6418562",
        "script": "export function validate(input) {\n  let proposal = JSON.parse(input);\n  let errors = [];\n  let position = 0;\n  for (const action of proposal[\"actions\"]) {\n    const definition = actions.get(action.name);\n    if (definition) {\n      try {\n        definition.validate(action.args);\n      } catch (e) {\n        errors.push(\n          `${action.name} at position ${position} failed validation: ${e}\\n${e.stack}`,\n        );\n      }\n    } else {\n      errors.push(`${action.name}: no such action`);\n    }\n    position++;\n  }\n  return { valid: errors.length === 0, description: errors.join(\", \") };\n}\n\nexport function apply(proposal, proposalId) {\n  const proposed_actions = JSON.parse(proposal)[\"actions\"];\n  for (const proposed_action of proposed_actions) {\n    const definition = actions.get(proposed_action.name);\n    definition.apply(proposed_action.args, proposalId);\n  }\n}\n\nfunction getMemberInfo(memberId) {\n  const key = ccf.strToBuf(memberId);\n  const value = ccf.kv[\"public:ccf.gov.members.info\"].get(key);\n  const info = ccf.bufToJsonCompatible(value);\n  return info;\n}\n\n// Returns true if the member is a recovery member.\nfunction isRecoveryMember(memberId) {\n  const key = ccf.strToBuf(memberId);\n  const value =\n    ccf.kv[\"public:ccf.gov.members.encryption_public_keys\"].get(key);\n\n  if (value) {\n    return true;\n  }\n  return false;\n}\n\n// Defines which of the members are operators.\nfunction isOperator(memberId) {\n  // // Operators cannot be recovery members.\n  // if (isRecoveryMember(memberId)) {\n  //   return false;\n  // }\n  const info = getMemberInfo(memberId);\n  return info.member_data && info.member_data.is_operator;\n}\n\n// Defines actions that can be passed with sole operator input.\nfunction canOperatorPass(action) {\n  // To enable code upgrades and disaster recovery, we've given the\n  // operator member some additional privileges.\n  // 1. add/remove node code are required for code upgrades.\n  // 2. set_constitution to replace this constitution with a \"correct\" one easily later on.\n  // 3. set_member to add a new members as needed.\n  const allowedOperatorActions = [\n    \"add_node_code\",\n    \"remove_ca_cert_bundle\",\n    \"remove_jwt_issuer\",\n    \"remove_node\",\n    \"remove_node_code\",\n    \"remove_service_principal\",\n    \"remove_user\",\n    \"remove_user_by_cert\",\n    \"set_ca_cert_bundle\",\n    \"set_constitution\",\n    \"set_js_app\",\n    \"set_jwt_issuer\",\n    \"set_jwt_public_signing_keys\",\n    \"set_member\",\n    \"set_node_certificate_validity\",\n    \"set_node_data\",\n    \"set_service_certificate_validity\",\n    \"set_service_configuration\",\n    \"set_service_principal\",\n    \"set_user\",\n    \"set_user_data\",\n    \"transition_node_to_trusted\",\n    \"transition_service_to_open\",\n    \"trigger_ledger_chunk\",\n    \"trigger_snapshot\",\n    \"add_snp_measurement\",\n    \"remove_snp_measurement\",\n    \"add_snp_uvm_endorsement\",\n    \"remove_snp_uvm_endorsement\",\n    \"add_snp_host_data\",\n    \"remove_snp_host_data\",\n    \"add_executor_node_code\",\n    \"remove_executor_node_code\",\n    \"set_builtin_roles_actions\",\n  ];\n\n  if (allowedOperatorActions.includes(action.name)) {\n    return true;\n  }\n  // Additionally, operators can add or retire other operators.\n  if (action.name === \"set_member\") {\n    const memberData = action.args[\"member_data\"];\n    if (memberData && memberData.is_operator) {\n      return true;\n    }\n  } else if (action.name === \"remove_member\") {\n    // Our custom remove_member action accepts the member's certificate as an argument\n    // instead of the member's ID.\n    const memberId = ccf.pemToId(action.args.cert);\n    if (isOperator(memberId)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function resolve(proposal, proposerId, votes) {\n  const actions = JSON.parse(proposal)[\"actions\"];\n\n  // Count member votes.\n  const memberVoteCount = votes.filter(\n    (v) => v.vote && !isOperator(v.member_id),\n  ).length;\n\n  // Count active members, excluding operators.\n  let activeMemberCount = 0;\n  ccf.kv[\"public:ccf.gov.members.info\"].forEach((value, key) => {\n    const memberId = ccf.bufToStr(key);\n    const info = ccf.bufToJsonCompatible(value);\n    if (info.status === \"Active\" && !isOperator(memberId)) {\n      activeMemberCount++;\n    }\n  });\n\n  // A proposal is an operator change if it's only applying operator actions.\n  const isOperatorChange = actions.every(canOperatorPass);\n\n  // A majority of members can always accept a proposal.\n  if (memberVoteCount > Math.floor(activeMemberCount / 2)) {\n    return \"Accepted\";\n  }\n\n  // Operators proposing operator changes can accept them without a vote.\n  if (isOperatorChange && isOperator(proposerId)) {\n    return \"Accepted\";\n  }\n\n  return \"Open\";\n}\n\nclass Action {\n  constructor(validate, apply) {\n    this.validate = validate;\n    this.apply = apply;\n  }\n}\n\n// This is the KV set Wrapper used to store the built in roles\n// TODO remove this when the KVSet wrapper is available in CCF package\nclass KVSet {\n  #map;\n\n  constructor(map) {\n    this.#map = map;\n  }\n\n  has(key) {\n    return this.#map.has(key);\n  }\n\n  add(key) {\n    this.#map.set(key, new ArrayBuffer(8));\n  }\n\n  delete(key) {\n    this.#map.delete(key);\n  }\n\n  clear() {\n    this.#map.clear();\n  }\n\n  asSetOfStrings() {\n    let set = new Set();\n    this.#map.forEach((_, key) => set.add(ccf.bufToJsonCompatible(key)));\n    return set;\n  }\n}\n\nfunction parseUrl(url) {\n  // From https://tools.ietf.org/html/rfc3986#appendix-B\n  const re = new RegExp(\n    \"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\",\n  );\n  const groups = url.match(re);\n  if (!groups) {\n    throw new TypeError(`${url} is not a valid URL.`);\n  }\n  return {\n    scheme: groups[2],\n    authority: groups[4],\n    path: groups[5],\n    query: groups[7],\n    fragment: groups[9],\n  };\n}\n\nfunction hexStrToBuf(hexStr) {\n  const result = [];\n\n  for (let i = 0; i < hexStr.length; i += 2) {\n    const octet = hexStr.slice(i, i + 2);\n    if (octet.length != 2 || octet.match(/[G-Z\\s]/i)) {\n      throw new Error(\"Hex string invalid\");\n    }\n    result.push(parseInt(octet, 16));\n  }\n\n  return new Uint8Array(result).buffer;\n}\n\nfunction checkType(value, type, field) {\n  const optional = type.endsWith(\"?\");\n  if (optional) {\n    if (value === null || value === undefined) {\n      return;\n    }\n    type = type.slice(0, -1);\n  }\n  if (type === \"array\") {\n    if (!Array.isArray(value)) {\n      throw new Error(`${field} must be an array`);\n    }\n  } else if (type === \"integer\") {\n    if (!Number.isInteger(value)) {\n      throw new Error(`${field} must be an integer`);\n    }\n  } else if (typeof value !== type) {\n    throw new Error(`${field} must be of type ${type} but is ${typeof value}`);\n  }\n}\n\nfunction checkEnum(value, members, field) {\n  if (!members.includes(value)) {\n    throw new Error(`${field} must be one of ${members}`);\n  }\n}\n\nfunction checkBounds(value, low, high, field) {\n  if (low !== null && value < low) {\n    throw new Error(`${field} must be greater than ${low}`);\n  }\n  if (high !== null && value > high) {\n    throw new Error(`${field} must be lower than ${high}`);\n  }\n}\n\nfunction checkLength(value, min, max, field) {\n  if (min !== null && value.length < min) {\n    throw new Error(`${field} must be an array of minimum ${min} elements`);\n  }\n  if (max !== null && value.length > max) {\n    throw new Error(`${field} must be an array of maximum ${max} elements`);\n  }\n}\n\nfunction checkNone(args) {\n  if (args !== null && args !== undefined) {\n    throw new Error(`Proposal does not accept any argument, found \"${args}\"`);\n  }\n}\n\nfunction checkEntityId(value, field) {\n  checkType(value, \"string\", field);\n  // This should be the hex-encoding of a SHA256 digest. This is 32 bytes long, so\n  // produces 64 hex characters.\n  const digestLength = 64;\n  if (value.length !== digestLength) {\n    throw new Error(`${field} must contain exactly ${digestLength} characters`);\n  }\n  const re = new RegExp(\"^[a-fA-F0-9]*$\");\n  if (!re.test(value)) {\n    throw new Error(`${field} contains non-hexadecimal character`);\n  }\n}\n\nfunction getSingletonKvKey() {\n  // When a KV map only contains one value, this is the key at which\n  // the value is recorded\n  return new ArrayBuffer(8);\n}\n\nfunction getActiveRecoveryMembersCount() {\n  let activeRecoveryMembersCount = 0;\n  ccf.kv[\"public:ccf.gov.members.encryption_public_keys\"].forEach((_, k) => {\n    let rawMemberInfo = ccf.kv[\"public:ccf.gov.members.info\"].get(k);\n    if (rawMemberInfo === undefined) {\n      throw new Error(`Recovery member ${ccf.bufToStr(k)} has no information`);\n    }\n\n    const memberInfo = ccf.bufToJsonCompatible(rawMemberInfo);\n    if (memberInfo.status === \"Active\") {\n      activeRecoveryMembersCount++;\n    }\n  });\n  return activeRecoveryMembersCount;\n}\n\nfunction checkJwks(value, field) {\n  checkType(value, \"object\", field);\n  checkType(value.keys, \"array\", `${field}.keys`);\n  for (const [i, jwk] of value.keys.entries()) {\n    checkType(jwk.kid, \"string\", `${field}.keys[${i}].kid`);\n    checkType(jwk.kty, \"string\", `${field}.keys[${i}].kty`);\n    checkType(jwk.x5c, \"array\", `${field}.keys[${i}].x5c`);\n    checkLength(jwk.x5c, 1, null, `${field}.keys[${i}].x5c`);\n    for (const [j, b64der] of jwk.x5c.entries()) {\n      checkType(b64der, \"string\", `${field}.keys[${i}].x5c[${j}]`);\n      const pem =\n        \"-----BEGIN CERTIFICATE-----\\n\" +\n        b64der +\n        \"\\n-----END CERTIFICATE-----\";\n      checkX509CertBundle(pem, `${field}.keys[${i}].x5c[${j}]`);\n    }\n  }\n}\n\nfunction checkX509CertBundle(value, field) {\n  if (!ccf.crypto.isValidX509CertBundle(value)) {\n    throw new Error(\n      `${field} must be a valid X509 certificate (bundle) in PEM format`,\n    );\n  }\n}\n\nfunction invalidateOtherOpenProposals(proposalIdToRetain) {\n  const proposalsMap = ccf.kv[\"public:ccf.gov.proposals_info\"];\n  proposalsMap.forEach((v, k) => {\n    let proposalId = ccf.bufToStr(k);\n    if (proposalId !== proposalIdToRetain) {\n      let info = ccf.bufToJsonCompatible(v);\n      if (info.state === \"Open\") {\n        info.state = \"Dropped\";\n        proposalsMap.set(k, ccf.jsonCompatibleToBuf(info));\n      }\n    }\n  });\n}\n\nfunction setServiceCertificateValidityPeriod(validFrom, validityPeriodDays) {\n  const rawConfig =\n    ccf.kv[\"public:ccf.gov.service.config\"].get(getSingletonKvKey());\n  if (rawConfig === undefined) {\n    throw new Error(\"Service configuration could not be found\");\n  }\n  const serviceConfig = ccf.bufToJsonCompatible(rawConfig);\n\n  const default_validity_period_days = 365;\n  const max_allowed_cert_validity_period_days =\n    serviceConfig.maximum_service_certificate_validity_days ??\n    default_validity_period_days;\n\n  if (\n    validityPeriodDays !== undefined &&\n    validityPeriodDays > max_allowed_cert_validity_period_days\n  ) {\n    throw new Error(\n      `Validity period ${validityPeriodDays} (days) is not allowed: service max allowed is ${max_allowed_cert_validity_period_days} (days)`,\n    );\n  }\n\n  const renewed_service_certificate = ccf.network.generateNetworkCertificate(\n    validFrom,\n    validityPeriodDays ?? max_allowed_cert_validity_period_days,\n  );\n\n  const serviceInfoTable = \"public:ccf.gov.service.info\";\n  const rawServiceInfo = ccf.kv[serviceInfoTable].get(getSingletonKvKey());\n  if (rawServiceInfo === undefined) {\n    throw new Error(\"Service info could not be found\");\n  }\n  const serviceInfo = ccf.bufToJsonCompatible(rawServiceInfo);\n\n  serviceInfo.cert = renewed_service_certificate;\n  ccf.kv[serviceInfoTable].set(\n    getSingletonKvKey(),\n    ccf.jsonCompatibleToBuf(serviceInfo),\n  );\n}\n\nfunction setNodeCertificateValidityPeriod(\n  nodeId,\n  nodeInfo,\n  validFrom,\n  validityPeriodDays,\n) {\n  if (nodeInfo.certificate_signing_request === undefined) {\n    throw new Error(`Node ${nodeId} has no certificate signing request`);\n  }\n\n  const rawConfig =\n    ccf.kv[\"public:ccf.gov.service.config\"].get(getSingletonKvKey());\n  if (rawConfig === undefined) {\n    throw new Error(\"Service configuration could not be found\");\n  }\n  const serviceConfig = ccf.bufToJsonCompatible(rawConfig);\n\n  const default_validity_period_days = 365;\n  const max_allowed_cert_validity_period_days =\n    serviceConfig.maximum_node_certificate_validity_days ??\n    default_validity_period_days;\n\n  if (\n    validityPeriodDays !== undefined &&\n    validityPeriodDays > max_allowed_cert_validity_period_days\n  ) {\n    throw new Error(\n      `Validity period ${validityPeriodDays} (days) is not allowed: service max allowed is ${max_allowed_cert_validity_period_days} (days)`,\n    );\n  }\n\n  const endorsed_node_cert = ccf.network.generateEndorsedCertificate(\n    nodeInfo.certificate_signing_request,\n    validFrom,\n    validityPeriodDays ?? max_allowed_cert_validity_period_days,\n  );\n  ccf.kv[\"public:ccf.gov.nodes.endorsed_certificates\"].set(\n    ccf.strToBuf(nodeId),\n    ccf.strToBuf(endorsed_node_cert),\n  );\n}\n\nfunction checkRecoveryThreshold(config, new_config) {\n  const from = config.recovery_threshold;\n  const to = new_config.recovery_threshold;\n  if (to === undefined || from === to) {\n    return;\n  }\n\n  const service_info = \"public:ccf.gov.service.info\";\n  const rawService = ccf.kv[service_info].get(getSingletonKvKey());\n  if (rawService === undefined) {\n    throw new Error(\"Service information could not be found\");\n  }\n\n  const service = ccf.bufToJsonCompatible(rawService);\n\n  if (service.status === \"WaitingForRecoveryShares\") {\n    throw new Error(\n      `Cannot set recovery threshold if service is ${service.status}`,\n    );\n  } else if (service.status === \"Open\") {\n    let activeRecoveryMembersCount = getActiveRecoveryMembersCount();\n    if (new_config.recovery_threshold > activeRecoveryMembersCount) {\n      throw new Error(\n        `Cannot set recovery threshold to ${new_config.recovery_threshold}: recovery threshold would be greater than the number of recovery members ${activeRecoveryMembersCount}`,\n      );\n    }\n  }\n}\n\nfunction checkReconfigurationType(config, new_config) {\n  const from = config.reconfiguration_type;\n  const to = new_config.reconfiguration_type;\n  if (from !== to && to !== undefined) {\n    if (\n      !(\n        (from === undefined || from === \"OneTransaction\") &&\n        to === \"TwoTransaction\"\n      )\n    ) {\n      throw new Error(\n        `Cannot change reconfiguration type from ${from} to ${to}.`,\n      );\n    }\n  }\n}\n\nfunction updateServiceConfig(new_config) {\n  const service_config_table = \"public:ccf.gov.service.config\";\n  const rawConfig = ccf.kv[service_config_table].get(getSingletonKvKey());\n  if (rawConfig === undefined) {\n    throw new Error(\"Service configuration could not be found\");\n  }\n  let config = ccf.bufToJsonCompatible(rawConfig);\n\n  // First run all checks\n  checkReconfigurationType(config, new_config);\n  checkRecoveryThreshold(config, new_config);\n\n  // Then all updates\n  if (new_config.reconfiguration_type !== undefined) {\n    config.reconfiguration_type = new_config.reconfiguration_type;\n  }\n\n  let need_recovery_threshold_refresh = false;\n  if (\n    new_config.recovery_threshold !== undefined &&\n    new_config.recovery_threshold !== config.recovery_threshold\n  ) {\n    config.recovery_threshold = new_config.recovery_threshold;\n    need_recovery_threshold_refresh = true;\n  }\n\n  if (new_config.recent_cose_proposals_window_size !== undefined) {\n    config.recent_cose_proposals_window_size =\n      new_config.recent_cose_proposals_window_size;\n  }\n\n  ccf.kv[service_config_table].set(\n    getSingletonKvKey(),\n    ccf.jsonCompatibleToBuf(config),\n  );\n\n  if (need_recovery_threshold_refresh) {\n    ccf.node.triggerRecoverySharesRefresh();\n  }\n}\n\nfunction addActionsToKVTable(role, actions) {\n  if (role && actions) {\n    const roleDefinition = new KVSet(\n      ccf.kv[`public:ccf.gov.builtin_roles.${role}`],\n    );\n    const currentValues = roleDefinition.asSetOfStrings();\n    const newValues = new Set(actions);\n    // filter out the duplicates and actions to add(perform set operation newValues-currentValues)\n    const actionsToAdd = [...newValues].filter(\n      (value) => !currentValues.has(value),\n    );\n    // Add the actions one by one to the kvset\n    for (const action of actionsToAdd) {\n      roleDefinition.add(ccf.jsonCompatibleToBuf(action));\n    }\n  }\n}\n\nconst actions = new Map([\n  [\n    \"set_constitution\",\n    new Action(\n      function (args) {\n        checkType(args.constitution, \"string\");\n      },\n      function (args, proposalId) {\n        ccf.kv[\"public:ccf.gov.constitution\"].set(\n          getSingletonKvKey(),\n          ccf.jsonCompatibleToBuf(args.constitution),\n        );\n\n        // Changing the constitution changes the semantics of any other open proposals, so invalidate them to avoid confusion or malicious vote modification\n        invalidateOtherOpenProposals(proposalId);\n      },\n    ),\n  ],\n  [\n    \"set_member\",\n    new Action(\n      function (args) {\n        checkX509CertBundle(args.cert, \"cert\");\n        checkType(args.member_data, \"object?\", \"member_data\");\n        // Also check that public encryption key is well formed, if it exists\n\n        // Check if member exists\n        // if not, check there is no enc pub key\n        // if it does, check it doesn't have an enc pub key in ledger\n      },\n\n      function (args) {\n        const memberId = ccf.pemToId(args.cert);\n        const rawMemberId = ccf.strToBuf(memberId);\n\n        ccf.kv[\"public:ccf.gov.members.certs\"].set(\n          rawMemberId,\n          ccf.strToBuf(args.cert),\n        );\n\n        if (args.encryption_pub_key == null) {\n          ccf.kv[\"public:ccf.gov.members.encryption_public_keys\"].delete(\n            rawMemberId,\n          );\n        } else {\n          ccf.kv[\"public:ccf.gov.members.encryption_public_keys\"].set(\n            rawMemberId,\n            ccf.strToBuf(args.encryption_pub_key),\n          );\n        }\n\n        let member_info = {};\n        member_info.member_data = args.member_data;\n        member_info.status = \"Accepted\";\n        ccf.kv[\"public:ccf.gov.members.info\"].set(\n          rawMemberId,\n          ccf.jsonCompatibleToBuf(member_info),\n        );\n\n        const rawSignature =\n          ccf.kv[\"public:ccf.internal.signatures\"].get(getSingletonKvKey());\n        if (rawSignature === undefined) {\n          ccf.kv[\"public:ccf.gov.members.acks\"].set(rawMemberId);\n        } else {\n          const signature = ccf.bufToJsonCompatible(rawSignature);\n          const ack = {};\n          ack.state_digest = signature.root;\n          ccf.kv[\"public:ccf.gov.members.acks\"].set(\n            rawMemberId,\n            ccf.jsonCompatibleToBuf(ack),\n          );\n        }\n      },\n    ),\n  ],\n  [\n    // Custom logic\n    \"remove_member\",\n    new Action(\n      function (args) {\n        checkX509CertBundle(args.cert, \"cert\");\n      },\n      function (args) {\n        const memberId = ccf.pemToId(args.cert);\n        const rawMemberId = ccf.strToBuf(memberId);\n        const rawMemberInfo =\n          ccf.kv[\"public:ccf.gov.members.info\"].get(rawMemberId);\n        if (rawMemberInfo === undefined) {\n          return; // Idempotent\n        }\n\n        const memberInfo = ccf.bufToJsonCompatible(rawMemberInfo);\n        const isActiveMember = memberInfo.status == \"Active\";\n\n        const isRecoveryMember = ccf.kv[\n          \"public:ccf.gov.members.encryption_public_keys\"\n        ].has(rawMemberId)\n          ? true\n          : false;\n\n        // If the member is an active recovery member, check that there\n        // would still be a sufficient number of recovery members left\n        // to recover the service\n        if (isActiveMember && isRecoveryMember) {\n          const rawConfig =\n            ccf.kv[\"public:ccf.gov.service.config\"].get(getSingletonKvKey());\n          if (rawConfig === undefined) {\n            throw new Error(\"Service configuration could not be found\");\n          }\n\n          const config = ccf.bufToJsonCompatible(rawConfig);\n          const activeRecoveryMembersCountAfter =\n            getActiveRecoveryMembersCount() - 1;\n          if (activeRecoveryMembersCountAfter < config.recovery_threshold) {\n            throw new Error(\n              `Number of active recovery members (${activeRecoveryMembersCountAfter}) would be less than recovery threshold (${config.recovery_threshold})`,\n            );\n          }\n        }\n\n        ccf.kv[\"public:ccf.gov.members.info\"].delete(rawMemberId);\n        ccf.kv[\"public:ccf.gov.members.encryption_public_keys\"].delete(\n          rawMemberId,\n        );\n        ccf.kv[\"public:ccf.gov.members.certs\"].delete(rawMemberId);\n        ccf.kv[\"public:ccf.gov.members.acks\"].delete(rawMemberId);\n        ccf.kv[\"public:ccf.gov.history\"].delete(rawMemberId);\n\n        if (isActiveMember && isRecoveryMember) {\n          // A retired recovery member should not have access to the private\n          // ledger going forward so rekey the ledger, issuing new shares to\n          // remaining active recovery members\n          ccf.node.triggerLedgerRekey();\n        }\n      },\n    ),\n  ],\n  [\n    \"set_member_data\",\n    new Action(\n      function (args) {\n        checkEntityId(args.member_id, \"member_id\");\n        checkType(args.member_data, \"object\", \"member_data\");\n      },\n\n      function (args) {\n        let member_id = ccf.strToBuf(args.member_id);\n        let members_info = ccf.kv[\"public:ccf.gov.members.info\"];\n        let member_info = members_info.get(member_id);\n        if (member_info === undefined) {\n          throw new Error(`Member ${args.member_id} does not exist`);\n        }\n        let mi = ccf.bufToJsonCompatible(member_info);\n        mi.member_data = args.member_data;\n        members_info.set(member_id, ccf.jsonCompatibleToBuf(mi));\n      },\n    ),\n  ],\n  [\n    \"set_user\",\n    new Action(\n      function (args) {\n        checkX509CertBundle(args.cert, \"cert\");\n        checkType(args.user_data, \"object?\", \"user_data\");\n      },\n      function (args) {\n        let userId = ccf.pemToId(args.cert);\n        let rawUserId = ccf.strToBuf(userId);\n\n        ccf.kv[\"public:ccf.gov.users.certs\"].set(\n          rawUserId,\n          ccf.strToBuf(args.cert),\n        );\n\n        if (args.user_data !== null && args.user_data !== undefined) {\n          // The proposal in ccfadmin expects to write the user_data completely, while the sample\n          // CCF constitution sets the `user_data` field in the user info to be the `user_data` in\n          // the proposal.\n          //\n          // That is, we send a proposal such that we get the following JSON:\n          // {\n          //   \"user_data\": {\n          //     \"roleName\": \"Administrator\"\n          //   }\n          // }\n          // while given our proposal the CCF sample constitution would create the following JSON\n          // instead:\n          // {\n          //   \"user_data\": {\n          //     \"user_data\": {\n          //       \"roleName\": \"Administrator\"\n          //     }\n          //   }\n          // }\n          //\n          // So we must leave our constitution like this until ccfadmin is updated, but we can't\n          // update ccfadmin unless we change the constitution in existing deployments -> let's just\n          // always have a custom constitution.\n          //\n          // https://msazure.visualstudio.com/One/_git/CCFCommon?path=/src/ccfcommonutils/ccfcommonutils/ccfmember/_member_client.py&version=GBmaster&line=232&lineEnd=233&lineStartColumn=1&lineEndColumn=1&lineStyle=plain&_a=contents\n          ccf.kv[\"public:ccf.gov.users.info\"].set(\n            rawUserId,\n            ccf.jsonCompatibleToBuf(args.user_data),\n          );\n        } else {\n          ccf.kv[\"public:ccf.gov.users.info\"].delete(rawUserId);\n        }\n      },\n    ),\n  ],\n  [\n    \"remove_user\",\n    new Action(\n      function (args) {\n        checkEntityId(args.user_id, \"user_id\");\n      },\n      function (args) {\n        const user_id = ccf.strToBuf(args.user_id);\n        ccf.kv[\"public:ccf.gov.users.certs\"].delete(user_id);\n        ccf.kv[\"public:ccf.gov.users.info\"].delete(user_id);\n      },\n    ),\n  ],\n  [\n    // Custom action\n    \"remove_user_by_cert\",\n    new Action(\n      function (args) {\n        checkX509CertBundle(args.cert, \"cert\");\n      },\n      function (args) {\n        let userId = ccf.pemToId(args.cert);\n        let rawUserId = ccf.strToBuf(userId);\n\n        ccf.kv[\"public:ccf.gov.users.certs\"].delete(rawUserId);\n        ccf.kv[\"public:ccf.gov.users.info\"].delete(rawUserId);\n      },\n    ),\n  ],\n  [\n    \"set_user_data\",\n    new Action(\n      function (args) {\n        checkEntityId(args.user_id, \"user_id\");\n        checkType(args.user_data, \"object?\", \"user_data\");\n      },\n      function (args) {\n        const userId = ccf.strToBuf(args.user_id);\n\n        // Unlike `set_user`, we use the same code as in the sample constitution, because ccfadmin\n        // submits the expected kind of proposal.\n        // https://msazure.visualstudio.com/One/_git/CCFCommon?path=/src/ccfcommonutils/ccfcommonutils/ccfmember/_member_client.py&version=GBmaster&line=440&lineEnd=441&lineStartColumn=1&lineEndColumn=1&lineStyle=plain&_a=contents\n        if (args.user_data !== null && args.user_data !== undefined) {\n          let userInfo = {};\n          userInfo.user_data = args.user_data;\n          ccf.kv[\"public:ccf.gov.users.info\"].set(\n            userId,\n            ccf.jsonCompatibleToBuf(userInfo),\n          );\n        } else {\n          ccf.kv[\"public:ccf.gov.users.info\"].delete(userId);\n        }\n      },\n    ),\n  ],\n  [\n    \"set_recovery_threshold\",\n    new Action(\n      function (args) {\n        checkType(args.recovery_threshold, \"integer\", \"threshold\");\n        checkBounds(args.recovery_threshold, 1, 254, \"threshold\");\n      },\n      function (args) {\n        updateServiceConfig(args);\n      },\n    ),\n  ],\n  [\n    \"trigger_recovery_shares_refresh\",\n    new Action(\n      function (args) {\n        checkNone(args);\n      },\n      function (args) {\n        ccf.node.triggerRecoverySharesRefresh();\n      },\n    ),\n  ],\n  [\n    \"trigger_ledger_rekey\",\n    new Action(\n      function (args) {\n        checkNone(args);\n      },\n\n      function (args) {\n        ccf.node.triggerLedgerRekey();\n      },\n    ),\n  ],\n  [\n    \"transition_service_to_open\",\n    new Action(\n      function (args) {\n        checkType(\n          args.next_service_identity,\n          \"string\",\n          \"next service identity (PEM certificate)\",\n        );\n        checkX509CertBundle(\n          args.next_service_identity,\n          \"next_service_identity\",\n        );\n\n        checkType(\n          args.previous_service_identity,\n          \"string?\",\n          \"previous service identity (PEM certificate)\",\n        );\n        if (args.previous_service_identity !== undefined) {\n          checkX509CertBundle(\n            args.previous_service_identity,\n            \"previous_service_identity\",\n          );\n        }\n      },\n\n      function (args) {\n        const service_info = \"public:ccf.gov.service.info\";\n        const rawService = ccf.kv[service_info].get(getSingletonKvKey());\n        if (rawService === undefined) {\n          throw new Error(\"Service information could not be found\");\n        }\n\n        const service = ccf.bufToJsonCompatible(rawService);\n\n        if (\n          service.status === \"Recovering\" &&\n          (args.previous_service_identity === undefined ||\n            args.next_service_identity === undefined)\n        ) {\n          throw new Error(\n            `Opening a recovering network requires both, the previous and the next service identity`,\n          );\n        }\n\n        const previous_identity =\n          args.previous_service_identity !== undefined\n            ? ccf.strToBuf(args.previous_service_identity)\n            : undefined;\n        const next_identity = ccf.strToBuf(args.next_service_identity);\n        ccf.node.transitionServiceToOpen(previous_identity, next_identity);\n      },\n    ),\n  ],\n  [\n    \"set_js_app\",\n    new Action(\n      function (args) {\n        const bundle = args.bundle;\n        checkType(bundle, \"object\", \"bundle\");\n\n        let prefix = \"bundle.modules\";\n        checkType(bundle.modules, \"array\", prefix);\n        for (const [i, module] of bundle.modules.entries()) {\n          checkType(module, \"object\", `${prefix}[${i}]`);\n          checkType(module.name, \"string\", `${prefix}[${i}].name`);\n          checkType(module.module, \"string\", `${prefix}[${i}].module`);\n        }\n\n        prefix = \"bundle.metadata\";\n        checkType(bundle.metadata, \"object\", prefix);\n        checkType(bundle.metadata.endpoints, \"object\", `${prefix}.endpoints`);\n        for (const [url, endpoint] of Object.entries(\n          bundle.metadata.endpoints,\n        )) {\n          checkType(endpoint, \"object\", `${prefix}.endpoints[\"${url}\"]`);\n          for (const [method, info] of Object.entries(endpoint)) {\n            const prefix2 = `${prefix}.endpoints[\"${url}\"][\"${method}\"]`;\n            checkType(info, \"object\", prefix2);\n            checkType(info.js_module, \"string\", `${prefix2}.js_module`);\n            checkType(info.js_function, \"string\", `${prefix2}.js_function`);\n            checkEnum(\n              info.mode,\n              [\"readwrite\", \"readonly\", \"historical\"],\n              `${prefix2}.mode`,\n            );\n            checkEnum(\n              info.forwarding_required,\n              [\"sometimes\", \"always\", \"never\"],\n              `${prefix2}.forwarding_required`,\n            );\n\n            const redirection_strategy = info.redirection_strategy;\n            if (redirection_strategy !== undefined) {\n              checkEnum(\n                info.redirection_strategy,\n                [\"none\", \"to_primary\", \"to_backup\"],\n                `${prefix2}.redirection_strategy`,\n              );\n            }\n\n            checkType(info.openapi, \"object?\", `${prefix2}.openapi`);\n            checkType(\n              info.openapi_hidden,\n              \"boolean?\",\n              `${prefix2}.openapi_hidden`,\n            );\n            checkType(\n              info.authn_policies,\n              \"array\",\n              `${prefix2}.authn_policies`,\n            );\n            for (const [i, policy] of info.authn_policies.entries()) {\n              if (typeof policy === \"string\") {\n                // May still be an unrecognised value. That will only throw later\n                continue;\n              } else if (typeof policy === \"object\") {\n                const constituents = policy[\"all_of\"];\n                checkType(\n                  constituents,\n                  \"array\",\n                  `${prefix2}.authn_policies[${i}].all_of`,\n                );\n                for (const [j, sub_policy] of constituents.entries()) {\n                  checkType(\n                    sub_policy,\n                    \"string\",\n                    `${prefix2}.authn_policies[${i}].all_of[${j}]`,\n                  );\n                }\n              } else {\n                throw new Error(\n                  `${prefix2}.authn_policies[${i}] must be of type string or object but is ${typeof policy}`,\n                );\n              }\n            }\n            if (!bundle.modules.some((m) => m.name === info.js_module)) {\n              throw new Error(`module '${info.js_module}' not found in bundle`);\n            }\n          }\n        }\n\n        checkType(\n          args.disable_bytecode_cache,\n          \"boolean?\",\n          \"disable_bytecode_cache\",\n        );\n      },\n      function (args) {\n        const modulesMap = ccf.kv[\"public:ccf.gov.modules\"];\n        const modulesQuickJsBytecodeMap =\n          ccf.kv[\"public:ccf.gov.modules_quickjs_bytecode\"];\n        const modulesQuickJsVersionVal =\n          ccf.kv[\"public:ccf.gov.modules_quickjs_version\"];\n        const interpreterFlushVal = ccf.kv[\"public:ccf.gov.interpreter.flush\"];\n        const endpointsMap = ccf.kv[\"public:ccf.gov.endpoints\"];\n        modulesMap.clear();\n        endpointsMap.clear();\n\n        const bundle = args.bundle;\n        for (const module of bundle.modules) {\n          const path = \"/\" + module.name;\n          const pathBuf = ccf.strToBuf(path);\n          const moduleBuf = ccf.strToBuf(module.module);\n          modulesMap.set(pathBuf, moduleBuf);\n        }\n\n        if (args.disable_bytecode_cache) {\n          modulesQuickJsBytecodeMap.clear();\n          modulesQuickJsVersionVal.clear();\n        } else {\n          ccf.refreshAppBytecodeCache();\n        }\n\n        interpreterFlushVal.set(\n          getSingletonKvKey(),\n          ccf.jsonCompatibleToBuf(true),\n        );\n\n        for (const [url, endpoint] of Object.entries(\n          bundle.metadata.endpoints,\n        )) {\n          for (const [method, info] of Object.entries(endpoint)) {\n            const key = `${method.toUpperCase()} ${url}`;\n            const keyBuf = ccf.strToBuf(key);\n\n            info.js_module = \"/\" + info.js_module;\n            const infoBuf = ccf.jsonCompatibleToBuf(info);\n            endpointsMap.set(keyBuf, infoBuf);\n          }\n        }\n      },\n    ),\n  ],\n  [\n    \"remove_js_app\",\n    new Action(\n      function (args) {},\n      function (args) {\n        const modulesMap = ccf.kv[\"public:ccf.gov.modules\"];\n        const modulesQuickJsBytecodeMap =\n          ccf.kv[\"public:ccf.gov.modules_quickjs_bytecode\"];\n        const interpreterFlushVal = ccf.kv[\"public:ccf.gov.interpreter.flush\"];\n        const modulesQuickJsVersionVal =\n          ccf.kv[\"public:ccf.gov.modules_quickjs_version\"];\n        const endpointsMap = ccf.kv[\"public:ccf.gov.endpoints\"];\n        modulesMap.clear();\n        modulesQuickJsBytecodeMap.clear();\n        modulesQuickJsVersionVal.clear();\n        interpreterFlushVal.clear();\n        endpointsMap.clear();\n      },\n    ),\n  ],\n  [\n    \"set_js_runtime_options\",\n    new Action(\n      function (args) {\n        checkType(args.max_heap_bytes, \"integer\", \"max_heap_bytes\");\n        checkType(args.max_stack_bytes, \"integer\", \"max_stack_bytes\");\n        checkType(\n          args.max_execution_time_ms,\n          \"integer\",\n          \"max_execution_time_ms\",\n        );\n        checkType(\n          args.log_exception_details,\n          \"boolean?\",\n          \"log_exception_details\",\n        );\n        checkType(\n          args.return_exception_details,\n          \"boolean?\",\n          \"return_exception_details\",\n        );\n        checkType(\n          args.max_cached_interpreters,\n          \"integer?\",\n          \"max_cached_interpreters\",\n        );\n      },\n      function (args) {\n        const js_engine_map = ccf.kv[\"public:ccf.gov.js_runtime_options\"];\n        js_engine_map.set(getSingletonKvKey(), ccf.jsonCompatibleToBuf(args));\n      },\n    ),\n  ],\n  [\n    \"refresh_js_app_bytecode_cache\",\n    new Action(\n      function (args) {},\n      function (args) {\n        ccf.refreshAppBytecodeCache();\n      },\n    ),\n  ],\n  [\n    \"set_ca_cert_bundle\",\n    new Action(\n      function (args) {\n        checkType(args.name, \"string\", \"name\");\n        checkX509CertBundle(args.cert_bundle, \"cert_bundle\");\n      },\n      function (args) {\n        const name = args.name;\n        const bundle = args.cert_bundle;\n        const nameBuf = ccf.strToBuf(name);\n        const bundleBuf = ccf.jsonCompatibleToBuf(bundle);\n        ccf.kv[\"public:ccf.gov.tls.ca_cert_bundles\"].set(nameBuf, bundleBuf);\n      },\n    ),\n  ],\n  [\n    \"remove_ca_cert_bundle\",\n    new Action(\n      function (args) {\n        checkType(args.name, \"string\", \"name\");\n      },\n      function (args) {\n        const name = args.name;\n        const nameBuf = ccf.strToBuf(name);\n        ccf.kv[\"public:ccf.gov.tls.ca_cert_bundles\"].delete(nameBuf);\n      },\n    ),\n  ],\n  [\n    \"set_jwt_issuer\",\n    new Action(\n      function (args) {\n        checkType(args.issuer, \"string\", \"issuer\");\n        checkType(args.auto_refresh, \"boolean?\", \"auto_refresh\");\n        checkType(args.ca_cert_bundle_name, \"string?\", \"ca_cert_bundle_name\");\n        checkEnum(args.key_filter, [\"all\", \"sgx\"], \"key_filter\");\n        checkType(args.key_policy, \"object?\", \"key_policy\");\n        if (args.key_policy) {\n          checkType(\n            args.key_policy.sgx_claims,\n            \"object?\",\n            \"key_policy.sgx_claims\",\n          );\n          if (args.key_policy.sgx_claims) {\n            for (const [name, value] of Object.entries(\n              args.key_policy.sgx_claims,\n            )) {\n              checkType(value, \"string\", `key_policy.sgx_claims[\"${name}\"]`);\n            }\n          }\n        }\n        checkType(args.jwks, \"object?\", \"jwks\");\n        if (args.jwks) {\n          checkJwks(args.jwks, \"jwks\");\n        }\n        if (args.auto_refresh) {\n          if (!args.ca_cert_bundle_name) {\n            throw new Error(\n              \"ca_cert_bundle_name is missing but required if auto_refresh is true\",\n            );\n          }\n          let url;\n          try {\n            url = parseUrl(args.issuer);\n          } catch (e) {\n            throw new Error(\"issuer must be a URL if auto_refresh is true\");\n          }\n          if (url.scheme != \"https\") {\n            throw new Error(\n              \"issuer must be a URL starting with https:// if auto_refresh is true\",\n            );\n          }\n          if (url.query || url.fragment) {\n            throw new Error(\n              \"issuer must be a URL without query/fragment if auto_refresh is true\",\n            );\n          }\n        }\n      },\n      function (args) {\n        if (args.auto_refresh) {\n          const caCertBundleName = args.ca_cert_bundle_name;\n          const caCertBundleNameBuf = ccf.strToBuf(args.ca_cert_bundle_name);\n          if (\n            !ccf.kv[\"public:ccf.gov.tls.ca_cert_bundles\"].has(\n              caCertBundleNameBuf,\n            )\n          ) {\n            throw new Error(\n              `No CA cert bundle found with name '${caCertBundleName}'`,\n            );\n          }\n        }\n        const issuer = args.issuer;\n        const jwks = args.jwks;\n        delete args.jwks;\n        const metadata = args;\n        if (jwks) {\n          ccf.setJwtPublicSigningKeys(issuer, metadata, jwks);\n        }\n        const issuerBuf = ccf.strToBuf(issuer);\n        const metadataBuf = ccf.jsonCompatibleToBuf(metadata);\n        ccf.kv[\"public:ccf.gov.jwt.issuers\"].set(issuerBuf, metadataBuf);\n      },\n    ),\n  ],\n  [\n    \"set_jwt_public_signing_keys\",\n    new Action(\n      function (args) {\n        checkType(args.issuer, \"string\", \"issuer\");\n        checkJwks(args.jwks, \"jwks\");\n      },\n      function (args) {\n        const issuer = args.issuer;\n        const issuerBuf = ccf.strToBuf(issuer);\n        const metadataBuf = ccf.kv[\"public:ccf.gov.jwt.issuers\"].get(issuerBuf);\n        if (metadataBuf === undefined) {\n          throw new Error(`issuer ${issuer} not found`);\n        }\n        const metadata = ccf.bufToJsonCompatible(metadataBuf);\n        const jwks = args.jwks;\n        ccf.setJwtPublicSigningKeys(issuer, metadata, jwks);\n      },\n    ),\n  ],\n  [\n    \"remove_jwt_issuer\",\n    new Action(\n      function (args) {\n        checkType(args.issuer, \"string\", \"issuer\");\n      },\n      function (args) {\n        const issuerBuf = ccf.strToBuf(args.issuer);\n        if (!ccf.kv[\"public:ccf.gov.jwt.issuers\"].has(issuerBuf)) {\n          return;\n        }\n        ccf.kv[\"public:ccf.gov.jwt.issuers\"].delete(issuerBuf);\n        ccf.removeJwtPublicSigningKeys(args.issuer);\n      },\n    ),\n  ],\n  [\n    // Custom logic\n    \"add_node_code\",\n    new Action(\n      function (args) {\n        checkType(args.new_code_id, \"string\", \"new_code_id\");\n      },\n      function (args, proposalId) {\n        const newCodeId = ccf.strToBuf(args.new_code_id);\n        const ALLOWED = ccf.jsonCompatibleToBuf(\"AllowedToJoin\");\n        ccf.kv[\"public:ccf.gov.nodes.code_ids\"].set(newCodeId, ALLOWED);\n\n        // Adding a new allowed code ID changes the semantics of any other open proposals, so invalidate them to avoid confusion or malicious vote modification\n        invalidateOtherOpenProposals(proposalId);\n      },\n    ),\n  ],\n  [\n    \"add_snp_measurement\",\n    new Action(\n      function (args) {\n        checkType(args.measurement, \"string\", \"measurement\");\n      },\n      function (args, proposalId) {\n        const measurement = ccf.strToBuf(args.measurement);\n        const ALLOWED = ccf.jsonCompatibleToBuf(\"AllowedToJoin\");\n        ccf.kv[\"public:ccf.gov.nodes.snp.measurements\"].set(\n          measurement,\n          ALLOWED,\n        );\n\n        // Adding a new allowed measurement changes the semantics of any other open proposals, so invalidate them to avoid confusion or malicious vote modification\n        invalidateOtherOpenProposals(proposalId);\n      },\n    ),\n  ],\n  [\n    \"add_snp_uvm_endorsement\",\n    new Action(\n      function (args) {\n        checkType(args.did, \"string\", \"did\");\n        checkType(args.feed, \"string\", \"feed\");\n        checkType(args.svn, \"string\", \"svn\");\n      },\n      function (args, proposalId) {\n        let uvmEndorsementsForDID = ccf.kv[\n          \"public:ccf.gov.nodes.snp.uvm_endorsements\"\n        ].get(ccf.strToBuf(args.did));\n        let uvme = {};\n        if (uvmEndorsementsForDID !== undefined) {\n          uvme = ccf.bufToJsonCompatible(uvmEndorsementsForDID);\n        }\n        uvme[args.feed] = { svn: args.svn };\n        ccf.kv[\"public:ccf.gov.nodes.snp.uvm_endorsements\"].set(\n          ccf.strToBuf(args.did),\n          ccf.jsonCompatibleToBuf(uvme),\n        );\n        // Adding a new allowed UVM endorsement changes the semantics of any other open proposals, so invalidate them to avoid confusion or malicious vote modification\n        invalidateOtherOpenProposals(proposalId);\n      },\n    ),\n  ],\n  [\n    \"add_executor_node_code\",\n    new Action(\n      function (args) {\n        checkType(args.executor_code_id, \"string\", \"executor_code_id\");\n      },\n      function (args) {\n        const codeId = ccf.strToBuf(args.executor_code_id);\n        const ALLOWED = ccf.jsonCompatibleToBuf(\"AllowedToExecute\");\n        ccf.kv[\"public:ccf.gov.nodes.executor_code_ids\"].set(codeId, ALLOWED);\n      },\n    ),\n  ],\n  [\n    \"add_snp_host_data\",\n    new Action(\n      function (args) {\n        checkType(args.security_policy, \"string\", \"security_policy\");\n        checkType(args.host_data, \"string\", \"host_data\");\n\n        // If optional security policy is specified, make sure its\n        // SHA-256 digest is the specified host data\n        if (args.security_policy != \"\") {\n          const securityPolicyDigest = ccf.bufToStr(\n            ccf.crypto.digest(\"SHA-256\", ccf.strToBuf(args.security_policy)),\n          );\n          const hostData = ccf.bufToStr(hexStrToBuf(args.host_data));\n          if (securityPolicyDigest != hostData) {\n            throw new Error(\n              `The hash of raw policy ${securityPolicyDigest} does not match digest ${hostData}`,\n            );\n          }\n        }\n      },\n      function (args, proposalId) {\n        ccf.kv[\"public:ccf.gov.nodes.snp.host_data\"].set(\n          ccf.strToBuf(args.host_data),\n          ccf.jsonCompatibleToBuf(args.security_policy),\n        );\n\n        // Adding a new allowed host data changes the semantics of any other open proposals, so invalidate them to avoid confusion or malicious vote modification\n        invalidateOtherOpenProposals(proposalId);\n      },\n    ),\n  ],\n  [\n    \"remove_snp_host_data\",\n    new Action(\n      function (args) {\n        checkType(args.host_data, \"string\", \"host_data\");\n      },\n      function (args) {\n        const hostData = ccf.strToBuf(args.host_data);\n        ccf.kv[\"public:ccf.gov.nodes.snp.host_data\"].delete(hostData);\n      },\n    ),\n  ],\n  [\n    \"remove_snp_measurement\",\n    new Action(\n      function (args) {\n        checkType(args.measurement, \"string\", \"measurement\");\n      },\n      function (args) {\n        const measurement = ccf.strToBuf(args.measurement);\n        ccf.kv[\"public:ccf.gov.nodes.snp.measurements\"].delete(measurement);\n      },\n    ),\n  ],\n  [\n    \"remove_snp_uvm_endorsement\",\n    new Action(\n      function (args) {\n        checkType(args.did, \"string\", \"did\");\n        checkType(args.feed, \"string\", \"feed\");\n      },\n      function (args) {\n        let uvmEndorsementsForDID = ccf.kv[\n          \"public:ccf.gov.nodes.snp.uvm_endorsements\"\n        ].get(ccf.strToBuf(args.did));\n        let uvme = {};\n        if (uvmEndorsementsForDID !== undefined) {\n          uvme = ccf.bufToJsonCompatible(uvmEndorsementsForDID);\n        }\n        delete uvme[args.feed];\n\n        if (Object.keys(uvme).length === 0) {\n          // Delete DID if no feed are left\n          ccf.kv[\"public:ccf.gov.nodes.snp.uvm_endorsements\"].delete(\n            ccf.strToBuf(args.did),\n          );\n        } else {\n          ccf.kv[\"public:ccf.gov.nodes.snp.uvm_endorsements\"].set(\n            ccf.strToBuf(args.did),\n            ccf.jsonCompatibleToBuf(uvme),\n          );\n        }\n      },\n    ),\n  ],\n  [\n    \"set_node_data\",\n    new Action(\n      function (args) {\n        checkEntityId(args.node_id, \"node_id\");\n      },\n      function (args) {\n        let node_id = ccf.strToBuf(args.node_id);\n        let nodes_info = ccf.kv[\"public:ccf.gov.nodes.info\"];\n        let node_info = nodes_info.get(node_id);\n        if (node_info === undefined) {\n          throw new Error(`Node ${node_id} does not exist`);\n        }\n        let ni = ccf.bufToJsonCompatible(node_info);\n        ni.node_data = args.node_data;\n        nodes_info.set(node_id, ccf.jsonCompatibleToBuf(ni));\n      },\n    ),\n  ],\n  [\n    \"transition_node_to_trusted\",\n    new Action(\n      function (args) {\n        checkEntityId(args.node_id, \"node_id\");\n        checkType(args.valid_from, \"string\", \"valid_from\");\n        if (args.validity_period_days !== undefined) {\n          checkType(\n            args.validity_period_days,\n            \"integer\",\n            \"validity_period_days\",\n          );\n          checkBounds(\n            args.validity_period_days,\n            1,\n            null,\n            \"validity_period_days\",\n          );\n        }\n      },\n      function (args) {\n        const rawConfig =\n          ccf.kv[\"public:ccf.gov.service.config\"].get(getSingletonKvKey());\n        if (rawConfig === undefined) {\n          throw new Error(\"Service configuration could not be found\");\n        }\n        const serviceConfig = ccf.bufToJsonCompatible(rawConfig);\n        const node = ccf.kv[\"public:ccf.gov.nodes.info\"].get(\n          ccf.strToBuf(args.node_id),\n        );\n        if (node === undefined) {\n          throw new Error(`No such node: ${args.node_id}`);\n        }\n        const nodeInfo = ccf.bufToJsonCompatible(node);\n        if (nodeInfo.status === \"Pending\") {\n          nodeInfo.status = \"Trusted\";\n          nodeInfo.ledger_secret_seqno =\n            ccf.network.getLatestLedgerSecretSeqno();\n          ccf.kv[\"public:ccf.gov.nodes.info\"].set(\n            ccf.strToBuf(args.node_id),\n            ccf.jsonCompatibleToBuf(nodeInfo),\n          );\n\n          // Also generate and record service-endorsed node certificate from node CSR\n          if (nodeInfo.certificate_signing_request !== undefined) {\n            // Note: CSR and node certificate validity config are only present from 2.x\n            const default_validity_period_days = 365;\n            const max_allowed_cert_validity_period_days =\n              serviceConfig.maximum_node_certificate_validity_days ??\n              default_validity_period_days;\n            if (\n              args.validity_period_days !== undefined &&\n              args.validity_period_days > max_allowed_cert_validity_period_days\n            ) {\n              throw new Error(\n                `Validity period ${args.validity_period_days} is not allowed: max allowed is ${max_allowed_cert_validity_period_days}`,\n              );\n            }\n\n            const endorsed_node_cert = ccf.network.generateEndorsedCertificate(\n              nodeInfo.certificate_signing_request,\n              args.valid_from,\n              args.validity_period_days ??\n                max_allowed_cert_validity_period_days,\n            );\n            ccf.kv[\"public:ccf.gov.nodes.endorsed_certificates\"].set(\n              ccf.strToBuf(args.node_id),\n              ccf.strToBuf(endorsed_node_cert),\n            );\n          }\n        }\n      },\n    ),\n  ],\n  [\n    // Custom logic\n    \"remove_node_code\",\n    new Action(\n      function (args) {\n        checkType(args.code_id_to_remove, \"string\", \"code_id_to_remove\");\n      },\n      function (args) {\n        const codeIdToRemove = ccf.strToBuf(args.code_id_to_remove);\n        ccf.kv[\"public:ccf.gov.nodes.code_ids\"].delete(codeIdToRemove);\n      },\n    ),\n  ],\n  [\n    \"remove_executor_node_code\",\n    new Action(\n      function (args) {\n        checkType(args.executor_code_id, \"string\", \"executor_code_id\");\n      },\n      function (args) {\n        const codeId = ccf.strToBuf(args.executor_code_id);\n        ccf.kv[\"public:ccf.gov.nodes.executor_code_ids\"].delete(codeId);\n      },\n    ),\n  ],\n  [\n    \"remove_node\",\n    new Action(\n      function (args) {\n        checkEntityId(args.node_id, \"node_id\");\n      },\n      function (args) {\n        const rawConfig =\n          ccf.kv[\"public:ccf.gov.service.config\"].get(getSingletonKvKey());\n        if (rawConfig === undefined) {\n          throw new Error(\"Service configuration could not be found\");\n        }\n        const serviceConfig = ccf.bufToJsonCompatible(rawConfig);\n        const node = ccf.kv[\"public:ccf.gov.nodes.info\"].get(\n          ccf.strToBuf(args.node_id),\n        );\n        if (node === undefined) {\n          return;\n        }\n        const node_obj = ccf.bufToJsonCompatible(node);\n        if (node_obj.status === \"Pending\") {\n          ccf.kv[\"public:ccf.gov.nodes.info\"].delete(\n            ccf.strToBuf(args.node_id),\n          );\n        } else {\n          node_obj.status = \"Retired\";\n          ccf.kv[\"public:ccf.gov.nodes.info\"].set(\n            ccf.strToBuf(args.node_id),\n            ccf.jsonCompatibleToBuf(node_obj),\n          );\n        }\n      },\n    ),\n  ],\n  [\n    \"set_node_certificate_validity\",\n    new Action(\n      function (args) {\n        checkEntityId(args.node_id, \"node_id\");\n        checkType(args.valid_from, \"string\", \"valid_from\");\n        if (args.validity_period_days !== undefined) {\n          checkType(\n            args.validity_period_days,\n            \"integer\",\n            \"validity_period_days\",\n          );\n          checkBounds(\n            args.validity_period_days,\n            1,\n            null,\n            \"validity_period_days\",\n          );\n        }\n      },\n      function (args) {\n        const node = ccf.kv[\"public:ccf.gov.nodes.info\"].get(\n          ccf.strToBuf(args.node_id),\n        );\n        if (node === undefined) {\n          throw new Error(`No such node: ${args.node_id}`);\n        }\n        const nodeInfo = ccf.bufToJsonCompatible(node);\n        if (nodeInfo.status !== \"Trusted\") {\n          throw new Error(`Node ${args.node_id} is not trusted`);\n        }\n\n        setNodeCertificateValidityPeriod(\n          args.node_id,\n          nodeInfo,\n          args.valid_from,\n          args.validity_period_days,\n        );\n      },\n    ),\n  ],\n  [\n    \"set_all_nodes_certificate_validity\",\n    new Action(\n      function (args) {\n        checkType(args.valid_from, \"string\", \"valid_from\");\n        if (args.validity_period_days !== undefined) {\n          checkType(\n            args.validity_period_days,\n            \"integer\",\n            \"validity_period_days\",\n          );\n          checkBounds(\n            args.validity_period_days,\n            1,\n            null,\n            \"validity_period_days\",\n          );\n        }\n      },\n      function (args) {\n        ccf.kv[\"public:ccf.gov.nodes.info\"].forEach((v, k) => {\n          const nodeId = ccf.bufToStr(k);\n          const nodeInfo = ccf.bufToJsonCompatible(v);\n          if (nodeInfo.status === \"Trusted\") {\n            setNodeCertificateValidityPeriod(\n              nodeId,\n              nodeInfo,\n              args.valid_from,\n              args.validity_period_days,\n            );\n          }\n        });\n      },\n    ),\n  ],\n  [\n    \"set_service_certificate_validity\",\n    new Action(\n      function (args) {\n        checkType(args.valid_from, \"string\", \"valid_from\");\n        if (args.validity_period_days !== undefined) {\n          checkType(\n            args.validity_period_days,\n            \"integer\",\n            \"validity_period_days\",\n          );\n          checkBounds(\n            args.validity_period_days,\n            1,\n            null,\n            \"validity_period_days\",\n          );\n        }\n      },\n      function (args) {\n        setServiceCertificateValidityPeriod(\n          args.valid_from,\n          args.validity_period_days,\n        );\n      },\n    ),\n  ],\n  [\n    \"set_service_configuration\",\n    new Action(\n      function (args) {\n        for (var key in args) {\n          if (\n            ![\n              \"reconfiguration_type\",\n              \"recovery_threshold\",\n              \"recent_cose_proposals_window_size\",\n            ].includes(key)\n          ) {\n            throw new Error(\n              `Cannot change ${key} via set_service_configuration.`,\n            );\n          }\n        }\n        checkType(args.reconfiguration_type, \"string?\", \"reconfiguration type\");\n        checkType(args.recovery_threshold, \"integer?\", \"recovery threshold\");\n        checkBounds(args.recovery_threshold, 1, 254, \"recovery threshold\");\n        checkType(\n          args.recent_cose_proposals_window_size,\n          \"integer?\",\n          \"recent cose proposals window size\",\n        );\n        checkBounds(\n          args.recent_cose_proposals_window_size,\n          1,\n          10000,\n          \"recent cose proposals window size\",\n        );\n      },\n      function (args) {\n        updateServiceConfig(args);\n      },\n    ),\n  ],\n  [\n    \"trigger_ledger_chunk\",\n    new Action(\n      function (args) {},\n      function (args, proposalId) {\n        ccf.node.triggerLedgerChunk();\n      },\n    ),\n  ],\n  [\n    \"trigger_snapshot\",\n    new Action(\n      function (args) {},\n      function (args, proposalId) {\n        ccf.node.triggerSnapshot();\n      },\n    ),\n  ],\n  [\n    \"trigger_acme_refresh\",\n    new Action(\n      function (args) {\n        checkType(\n          args.interfaces,\n          \"array?\",\n          \"interfaces to refresh the certificates for\",\n        );\n      },\n      function (args, proposalId) {\n        ccf.node.triggerACMERefresh(args.interfaces);\n      },\n    ),\n  ],\n  [\n    \"assert_service_identity\",\n    new Action(\n      function (args) {\n        checkX509CertBundle(args.service_identity, \"service_identity\");\n        const service_info = \"public:ccf.gov.service.info\";\n        const rawService = ccf.kv[service_info].get(getSingletonKvKey());\n        if (rawService === undefined) {\n          throw new Error(\"Service information could not be found\");\n        }\n        const service = ccf.bufToJsonCompatible(rawService);\n        if (service.cert !== args.service_identity) {\n          throw new Error(\"Service identity certificate mismatch\");\n        }\n      },\n      function (args) {},\n    ),\n  ],\n  [\n    \"set_service_principal\",\n    new Action(\n      function (args) {\n        checkType(args.id, \"string\", \"id\");\n        checkType(args.data, \"object\", \"data\");\n      },\n      function (args) {\n        ccf.kv[\"public:ccf.gov.service_principals\"].set(\n          ccf.strToBuf(args.id),\n          ccf.jsonCompatibleToBuf(args.data),\n        );\n      },\n    ),\n  ],\n  [\n    \"remove_service_principal\",\n    new Action(\n      function (args) {\n        checkType(args.id, \"string\", \"id\");\n      },\n      function (args) {\n        ccf.kv[\"public:ccf.gov.service_principals\"].delete(\n          ccf.strToBuf(args.id),\n        );\n      },\n    ),\n  ],\n  [\n    // Action to add Roles for Admin,Contributor and Reader\n    \"set_builtin_roles_actions\",\n    new Action(\n      function (args) {\n        checkType(args.roles, \"array\", \"roles\");\n        args.roles.forEach((role, rolesindex) => {\n          checkType(role, \"object\", `roles[${rolesindex}]`);\n          checkType(role.rolename, \"string\", `roles.[${rolesindex}].rolename`);\n          checkType(role.actions, \"array\", `roles.[${rolesindex}].actions`);\n          role.actions.forEach((obj, actionindex) => {\n            checkType(\n              obj,\n              \"string\",\n              `roles.[${rolesindex}].actions.[${actionindex}]`,\n            );\n          });\n        });\n      },\n\n      function (args) {\n        args.roles.forEach((role) => {\n          addActionsToKVTable(role.rolename, role.actions);\n        });\n      },\n    ),\n  ],\n]);\n"
      }
    },
    {
      "RequestUri": "https://Sanitized.confidential-ledger.azure.com/app/enclaveQuotes?api-version=2024-12-09-preview",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-confidentialledger/1.2.0b1 Python/3.13.3 (Windows-11-10.0.26100-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "29513",
        "Content-Type": "application/json",
        "x-ms-ccf-transaction-id": "25.4460"
      },
      "ResponseBody": {
        "currentNodeId": "39b41d8e7a73cce207e2253cad77fbc38f0d6e6c74258b70b5a255c9b3b9c0e4",
        "enclaveQuotes": {
          "02dde1608dcff3f776888ace37cb095b83b3f1cc9e191e4186aa246d472aaa14": {
            "nodeId": "02dde1608dcff3f776888ace37cb095b83b3f1cc9e191e4186aa246d472aaa14",
            "quoteVersion": "OE_SGX_v1",
            "raw": "030002000000000009000e00939a7233f79c4ca9940a0db3957f060734a27b460609a865451c2be5444fef6a000000000e0e100fffff010000000000000000000000000000000000000000000000000000000000000000000000000000000000050000000000000007000000000000004ef5e320a33e9caee7039c29eb950d1a49e2a9f03c772e03bcf2ddb7a6e21df40000000000000000000000000000000000000000000000000000000000000000895eb06383dc1649990873de1077e55f159b5079f0e2af775621d92b47f5602d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f9e1121a6f007584203562a0f001f9aab074b1835f441afc8de03d4599d8239e0000000000000000000000000000000000000000000000000000000000000000c610000036920775dd8faccb0f5a14c42e7f1a2161aae7c1a6e87f78b0b79f14b3951712989f54e1e80b12961a520644bf090d5c1fa246e94479d11861e35b16ffb1b967562f4979192fd4446dcd2be65995f87d6cad2fea38b75c645cedfc8628dc7834cc5e9452ecd497c95089b70e77a61803a975301bcd19cd1d894a3af7a32bedc90e0e100fffff0100000000000000000000000000000000000000000000000000000000000000000000000000000000001500000000000000e700000000000000192aa50ce1c0cef03ccf89e7b5b16b0d7978f5c2b1edcf774d87702e8154d8bf00000000000000000000000000000000000000000000000000000000000000008c4f5775d796503e96137f77c68a829a0056ac8ded70140b081b094490c57bff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004fde24383c0b3725f24b7b305c95648ffe6e806613085a5b49ac2b72bbbeb5ed0000000000000000000000000000000000000000000000000000000000000000ea6ca738cf5e91f3dd1e9ec110e50c486de108835157409e32240017f895dd062375dd52240139731661b6d97f79fc6f652ff95a58c3ed42089e1fcd353831802000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f05005e0e00002d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d49494538544343424a696741774942416749554630594b4b4f73743368544a2b336a472b4663543759447138595177436759494b6f5a497a6a3045417749770a634445694d434147413155454177775a535735305a577767553064594946424453794251624746305a6d397962534244515445614d42674741315545436777520a535735305a577767513239796347397959585270623234784644415342674e564241634d43314e68626e526849454e7359584a684d51737743515944565151490a44414a445154454c4d416b474131554542684d4356564d774868634e4d6a51774f4449344d5455774e6a51775768634e4d7a45774f4449344d5455774e6a51770a576a42774d534977494159445651514444426c4a626e526c624342545231676755454e4c49454e6c636e52705a6d6c6a5958526c4d526f77474159445651514b0a4442464a626e526c6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e560a4241674d416b4e424d517377435159445651514745774a56557a425a4d424d4742797147534d34394167454743437147534d343941774548413049414242686a0a786f34796e6367444c4e7034547665316f705536597a466e336d3758436864494c544c4a54797a4c794b755653454e7174696f5052526d4b77744b37566a6a770a707772702f516f57576762762f624c467032476a67674d4f4d494944436a416642674e5648534d4547444157674253566231334e765276683655424a796454300a4d383442567776655644427242674e56485238455a4442694d47436758714263686c706f64485277637a6f764c32467761533530636e567a6447566b633256790a646d6c6a5a584d75615735305a577775593239744c334e6e6543396a5a584a3061575a7059324630615739754c33597a4c33426a61324e796244396a595431770a624746305a6d397962535a6c626d4e765a476c755a7a316b5a584977485159445652304f42425945464d71757176487050496f575a34534e35447a466c6748710a445844764d41344741315564447745422f775145417749477744414d42674e5648524d4241663845416a41414d4949434f77594a4b6f5a496876684e415130420a424949434c444343416967774867594b4b6f5a496876684e415130424151515149343057506e5053473457617865567457786e506c7a434341575547436971470a534962345451454e41514977676746564d42414743797147534962345451454e415149424167454f4d42414743797147534962345451454e415149434167454f0a4d42414743797147534962345451454e41514944416745444d42414743797147534962345451454e41514945416745444d42454743797147534962345451454e0a41514946416749412f7a415242677371686b69472b4530424451454342674943415038774541594c4b6f5a496876684e4151304241676343415145774541594c0a4b6f5a496876684e4151304241676743415141774541594c4b6f5a496876684e4151304241676b43415141774541594c4b6f5a496876684e4151304241676f430a415141774541594c4b6f5a496876684e4151304241677343415141774541594c4b6f5a496876684e4151304241677743415141774541594c4b6f5a496876684e0a4151304241673043415141774541594c4b6f5a496876684e4151304241673443415141774541594c4b6f5a496876684e4151304241673843415141774541594c0a4b6f5a496876684e4151304241684143415141774541594c4b6f5a496876684e4151304241684543415130774877594c4b6f5a496876684e41513042416849450a4541344f4177502f2f7745414141414141414141414141774541594b4b6f5a496876684e4151304241775143414141774641594b4b6f5a496876684e415130420a4241514741474271414141414d41384743697147534962345451454e4151554b415145774867594b4b6f5a496876684e41513042426751513235337259694d460a394f7934476341576f4b6748416a424542676f71686b69472b453042445145484d4459774541594c4b6f5a496876684e4151304242774542416638774541594c0a4b6f5a496876684e4151304242774942415141774541594c4b6f5a496876684e4151304242774d4241514177436759494b6f5a497a6a304541774944527741770a52414967643044543552712f513073416b46487a773932484a76506e56374b6f6d4b32527a6a48332f3637706c4177434944463770367a5363315039504e55460a7946345345383458306a3935415a6e685a52464738474147766872540a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436c6a4343416a32674177494241674956414a567658633239472b487051456e4a3150517a7a674658433935554d416f4743437147534d343942414d430a4d476778476a415942674e5642414d4d45556c756447567349464e48574342536232393049454e424d526f77474159445651514b4442464a626e526c624342440a62334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d5173770a435159445651514745774a56557a4165467730784f4441314d6a45784d4455774d5442614677307a4d7a41314d6a45784d4455774d5442614d484178496a41670a42674e5642414d4d47556c756447567349464e4857434251513073675547786864475a76636d306751304578476a415942674e5642416f4d45556c75644756730a49454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b474131554543417743513045780a437a414a42674e5642415954416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a304441516344516741454e53422f377432316c58534f0a3243757a7078773734654a423732457944476757357258437478327456544c7136684b6b367a2b5569525a436e71523770734f766771466553786c6d546c4a6c0a65546d693257597a33714f42757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f536347724442530a42674e5648523845537a424a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b633256790a646d6c6a5a584d75615735305a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e5648513445466751556c5739640a7a62306234656c4153636e553944504f4156634c336c517744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159420a4166384341514177436759494b6f5a497a6a30454177494452774177524149675873566b6930772b6936565947573355462f32327561586530594a446a3155650a6e412b546a44316169356343494359623153416d4435786b66545670766f34556f79695359787244574c6d5552344349394e4b7966504e2b0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a7a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4455784d466f58445451354d54497a4d54497a4e546b314f566f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a3045417749445351417752674968414f572f35516b522b533943695344634e6f6f774c7550524c735747662f59693747535839344267775477670a41694541344a306c72486f4d732b586f356f2f7358364f39515778485241765a55474f6452513763767152586171493d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a0001000000000000000100000000000000100000000000000020000000000000007367785f7265706f72745f646174610002dde1608dcff3f776888ace37cb095b83b3f1cc9e191e4186aa246d472aaa14"
          },
          "39b41d8e7a73cce207e2253cad77fbc38f0d6e6c74258b70b5a255c9b3b9c0e4": {
            "nodeId": "39b41d8e7a73cce207e2253cad77fbc38f0d6e6c74258b70b5a255c9b3b9c0e4",
            "quoteVersion": "OE_SGX_v1",
            "raw": ""
          },
          "3cbb1bb5cf694183ced2110e2374fed33ee5fb8083a5e9e00b9a15b988deae2b": {
            "nodeId": "3cbb1bb5cf694183ced2110e2374fed33ee5fb8083a5e9e00b9a15b988deae2b",
            "quoteVersion": "OE_SGX_v1",
            "raw": ""
          }
        }
      }
    }
  ],
  "Variables": {}
}
