{
  "Entries": [
    {
      "RequestUri": "https://REDACTED/openai/deployments/gpt-35-turbo-16k/chat/completions?api-version=2024-05-01-preview",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "api-key": "REDACTED",
        "Content-Length": "296",
        "Content-Type": "application/json",
        "Date": "Fri, 24 May 2024 02:43:42 GMT",
        "User-Agent": "azsdk-java-azure-ai-openai/1.0.0-beta.9 (11.0.21; Windows 11; 10.0)",
        "x-ms-client-request-id": "Sanitized"
      },
      "RequestBody": {
        "messages": [
          {
            "content": "V2hhdCBkb2VzIFBSIGNvbXBsZXRlIG1lYW4/",
            "role": "user"
          }
        ],
        "data_sources": [
          {
            "parameters": {
              "endpoint": "https://REDACTED",
              "index_name": "openai-test-index-carbon-wiki",
              "authentication": {
                "key": "REDACTED",
                "type": "api_key"
              },
              "include_contexts": [
                "citations"
              ]
            },
            "type": "azure_search"
          }
        ]
      },
      "StatusCode": 200,
      "ResponseHeaders": {
        "apim-request-id": "f6a68860-d87b-4d38-8c30-7067bfb54c75",
        "Content-Length": "12402",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Fri, 24 May 2024 02:43:44 GMT",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains; preload",
        "X-Content-Type-Options": "nosniff",
        "x-envoy-upstream-service-time": "1268",
        "x-ms-client-request-id": "Sanitized",
        "x-ms-region": "East US",
        "x-ratelimit-remaining-requests": "119",
        "x-ratelimit-remaining-tokens": "119984"
      },
      "ResponseBody": {
        "id": "21108967-6936-4ae6-8b8a-09296841bf1c",
        "model": "gpt-35-turbo-16k",
        "created": 1716518624,
        "object": "extensions.chat.completion",
        "choices": [
          {
            "index": 0,
            "finish_reason": "stop",
            "message": {
              "role": "assistant",
              "content": "The requested information is not available in the retrieved data. Please try another query or topic.",
              "end_turn": true,
              "context": {
                "citations": [
                  {
                    "content": "<h2>AI Cognitive Services SDK Releases</h2>\n\n\"When's the next release?\"\n\"How long is there left to get this change in?\"\n\"When did we release that old version?\"\n\n<h3>Current, in-development release</h3>\n\n\n\nSprint Label\nVersion - Speech\nVersion - Vision\nAll PRs out\nRelease by\nNotes\n\n\n\n\n202301\n1.25.0\n0.7\nFri Jan 13\nFri Jan 27\n\n\n\n\n<p><strong>\"PR complete\" and \"release by\"</strong></p>\n<p>We generally talk about two dates when it comes to upcoming releases:</p>\n\n<strong>PR complete</strong> or <strong>\"all PRs out by\"</strong>: this is the date when all pull requests that are intended to be part of the release should be functionally complete and out for review. It's OK if it still needs a few updates, but expectations on pending PRs should be that they'll wrap up within a business day or two. This is what's tracked in our sprints.\n<strong>Release</strong> or <strong>\"release by\"</strong>: This is roughly the \"P95\" estimate for the latest the publicly-available release packages are published and available under the assumption that the corresponding PR complete date holds. This is an estimate that's intended to be conservative -- most releases happen before the projected date, but <strong>release is always gated by readiness</strong> and it's possible for things to get postponed. Estimated release dates may be communicated to customers, but only with the clarification that it's a target and not a guarantee.\n\n<p>The single \"source of truth\" for the SDK's \"PR complete\" date is the sprint definition on Azure DevOps: <a href=\"https://msasg.visualstudio.com/Skyman/_sprints/taskboard/Carbon%20Team/Skyman/Carbon/\">https://msasg.visualstudio.com/Skyman/_sprints/taskboard/Carbon%20Team/Skyman/Carbon/</a></p>\n<p>See the sprint date range definition in the upper right, e.g.:</p>\n<p><img src=\"https://media.microsoft.ghe.com/user/5475/files/00c74e6f-de09-45dc-ae56-2954ee12006d\"/></p>\n<p>\"Release by\" dates, meanwhile, are generally estimated at about two weeks past PR complete -- time enough for in-flight PRs to wrap up, release candidates to be built and validated across all languages/environments, documentation and other external repository resources to be staged, and bits to be published.</p>\n<p>The dates here are replicated for convenience and history. This may not always be entirely up to date; please check the sprint board above or contact the team (cdev) if anything's unclear!</p>\n<h3>Release planning</h3>\n<p><a href=\"./planning.md\">SDK planning -- Wiki</a></p>\n<h3>Release signoff</h3>\n<p><a href=\"https://microsoft.sharepoint.com/teams/Carbon2/_layouts/OneNote.aspx?id=%2Fteams%2FCarbon2%2FSiteAssets%2FCarbon%20Notebook&amp;wd=target%28Release.one%7C47758B05-9653-4BA3-B15F-0737A0AB5880%2F%29\">SDK release process -- OneNote</a></p>",
                    "title": "AI Cognitive Services SDK Releases",
                    "url": "REDACTED",
                    "filepath": "release.md",
                    "chunk_id": "0"
                  },
                  {
                    "content": "<p>Create Carbon CMake files and VS solutions</p>\n\nCreate a build directory <strong>inside</strong> the local Carbon repository directory by typing:\n\n<pre> cd Carbon\n mkdir build\n cd build\n</pre>\n\nOpen an admin command prompt, and cd to the Carbon folder\n\n<p>At this point, <strong>From your build folder</strong>, running cmake .. <strong>as administrator</strong> (nb: the .. for \"parent directory\" is vital and easy to miss) will generate default-configuration cmake and VS solutions for both Release and Debug builds. It will not yet compile source code. However, it may be that these defaults <strong>do not meet your needs</strong>, so continue reading before running cmake.</p>\n<p>Alternately, if you want to maintain lowest privledges for each task instead of running the build as an administrator you can grant yourself symbolic link permissions in three steps:\n1) Create a local group to have the permission:\n C:\\Windows\\system32&gt; net localgroup /add SymLinkUsers\n2) Add youself to the group:\n net localgroup /add SymLinkUsers @microsoft.com\n3) In the Local SecurityPolcy under Local Policies-&gt;User Rights Assignment add the \"SymLinkUsers\" group.\n (You will need to be sure to select \"groups\" from the Ojbect Types)\n(The path is convoluted because AAD joined machines cannot directly assign rights to AAD accounts).</p>\n<pre>#### Default build configuration\n</pre>\n\nBy default, the VS2022 generator will be used, equivalent to -G \"Visual Studio 17 2022\" (<a href=\"https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html\">read more about generators here</a>)\nBy default, C++, C#, Java and Python APIs will be built. This is equivalent to specifying -DBUILD_JAVA=\"ON\" -DBUILD_CSHARP=\"ON\" -DBUILD_PYTHON=\"ON\". You can specify =\"OFF\" for any one of them to turn off that language. For example, run cmake .. -DBUILD_JAVA=\"OFF\" -DBUILD_CSHARP=\"OFF\" -DBUILD_PYTHON=\"OFF\" to only build C++.\nNo extensions are built by default. See below for a table of supported extensions (e.g. keyword spotting)\n",
                    "title": "Checkout and Build Carbon on Windows",
                    "url": "REDACTED",
                    "filepath": "setupwinenv.md",
                    "chunk_id": "0"
                  },
                  {
                    "content": "<p>Customize your build for Embedded Speech</p>\n<p>Embedded speech (recognition, synthesis) support is not enabled by default. To enable it, download and configure the following external components:\n* ONNX runtime\n * Download build artifacts as instructed in external\\onnx_runtime\\README.md.</p>\n\nSR runtime and models\nDownload build artifacts as instructed in external\\sr_runtime\\README.md.\nAdd -DEXTENSION_RNNT_ENABLED=true to Carbon cmake options to enable the feature.\nIt is not necessary to download all SR models if not specifically needed. cxx_api_tests uses FP\\en-US\\V4\\onnx and whatever the latest FP\\en-US\\V#\\onnx and FP\\de-DE\\V#\\onnx models are (# = the highest version number available).\nIf running cxx_api_tests, add --offlineModelPathList=path\\to\\model(s) to command-line options.\n\n<p>Complete embedded SR tests require also embedded TTS, as well as KWS and GStreamer (see Customized extensions in this document).</p>\n\n\n<p>TTS runtime and voices</p>\n\nDownload build artifacts as instructed in external\\offline_tts\\README.md.\n\n<p>Add -DEXTENSION_HYBRID_TTS_ENABLED=true to Carbon cmake options to enable the feature.</p>\n\n\n<p>1DS C/C++ SDK libraries for embedded speech telemetry on Windows</p>\n\nDownload build artifacts as instructed in external\\cpp_client_telemetry_windows\\README.md.\n\nCustomized extensions\n<p>Carbon builds a variety of optional extensions that aren't included in the build project by default. Each has a set of setup instructions, usually involving downloading a build artifact, and each has a cmake flag to enable it in your local build.\n The \"source of truth\" for these extensions is the CMakeLists.txt file in the root folder of your clone; search for \"EXTENSION_\" or \"DEXTENSION\". As a snap:</p>\n\n\n\nExtension\nVision/Speech\nBuild parameter\nUses folders\n\n\n\n\nKWS\nSpeech\n-DEXTENSION_KWS_ENABLED=\"ON\"\nCarbon\\external\\KWS (See README.md there)\n\n\nAudio Compression<br/>(Sending Silk audio to the cloud)\nSpeech\n-DEXTENSION_AUDIOCOMPRESSION_ENABLED=\"ON\"\nCarbon\\source\\extensions\\audio-compression<br/> (TODO is this still used? Carbon\\external\\silk-codec)\n\n\nGStreamer decoder support<br/>(Decoding compressed input audio)\nSpeech\n-DEXTENSION_CODEC_ENABLED=\"ON\"\nCarbon\\source\\extensions\\codec<br/>Carbon\\external\\gstreamer-android<br/>Carbon\\external\\gstreamer-windows\n\n\nMedia source\nVision\n-DEXTENSION_MEDIA_SOURCE_INGESTION_ENABLED=\"ON\"\ncarbon\\external\\media-source-ingestion\n\n\n\n<p><strong>NOTE:</strong> See the instructions in each extension's folder, e.g. carbon/external/kws/readme.md, to ensure a successful local build.</p>",
                    "title": "Checkout and Build Carbon on Windows",
                    "url": "REDACTED",
                    "filepath": "setupwinenv.md",
                    "chunk_id": "1"
                  },
                  {
                    "content": "<h1>Checkout and Build Carbon on Windows</h1>\n<h3>Setup</h3>\n\n\n\nResource\n\nNotes\n\n\n\n\nCMake\nRequired\nhttps://cmake.org/download/ -- The cmake version should be &gt;= 3.16. (You're best bet is to use teh same version that the ADO lab agents are using as you know that'll work see https://github.com/actions/runner-images/blob/main/images/win/Windows2022-Readme.md to find that version) Under \"Binary distributions\", click on the .msi file next to \"Windows win64-x64 Installer\". During installation, select \"Add CMake to the system PATH for all users\" or for \"current user\".\n\n\nNuGet\nRequired\nhttps://www.nuget.org/downloads -- Not an installer, so put nuget.exe somewhere on your system path (e.g. Windows\\System32 from an admin command prompt)\n\n\nVisual Studio 2022\nRecommended\nhttps://visualstudio.microsoft.com -- You can use vscode or other environments as an IDE, but Visual Studio is the standard and a great place to start. Grab the Enterprise edition from . Include .NET desktop development, Desktop development with C++, and Python development as workloads, or run the Visual Studio Installer if you need to add these workloads to an existing install.\n\n\n\n\nRecommended extension: <strong>StopOnFirstBuildError</strong>. The Carbon Visual Studio project has lots of solution in it. When you develop code using VS, sometimes you want the build to stop on the first build error. Otherwise, it will continue on to try and build all the solutions in the project. To install the extension, open Visual Studio 2022 (you can select \"continue without code...\"), Select Extension --&gt; Manage Extensions --&gt; Online, and search for StopOnFirstBuildError. Select and install it. This is a <a href=\"https://marketplace.visualstudio.com/items?itemName=EinarEgilsson.StopOnFirstBuildError\">direct link</a> to the VS marketplace page for this extension. Once the extension is installed, you will see a \"Stop build on first error\" check box in the VS build menu (only visible in a multi-project solution)\n\n\nPython\nRequired<br/>(For Python)\nhttps://www.python.org/downloads/windows/ -- Install Python 3.x.x (be sure to pick the 64-bit version!)\n\n\nJava\nRequired<br/>(for Java)\nhttps://www.azul.com/downloads/zulu -- In the section \"Download Zulu Builds of OpenJDK\" go to the latest build, find the Windows 64-bit row, and click on the .msi link. Install it in the default folder.\n\n\n\n\nAdd JAVA_HOME as a global environment variable. For example, if you install Zulu 15 using the default path, set the environment variable JAVA_HOME to C:\\Program Files\\zulu\\zulu-15, if this wasn't done by the installer already. To set an environment variable, click on the Windows Start icon, start typing \"environment\" --&gt; click on \"edit environment variables for your account\" --&gt; \"Environment Variables\". Add/update the system variables as needed.\n\n\n\n<h3>Quick checks (or troubleshooting)</h3>\n<p>From a fresh CLI environment (e.g. cmd.exe):</p>\n\necho %JAVA_HOME% to confirm JAVA_HOME is on your PATH (see \"Java,\" above)\ncmake --version should work and report a version =&gt; 3.19.7\npy should work (see \"Python,\" above) -- Ctrl+Z exits the interactive prompt\n\n<p>javac should work (see \"Java,\" above)Clone the repository</p>\n\n\n<p>Create a local clone of the Carbon codebase with:\n shell\n git clone https://msasg.visualstudio.com/DefaultCollection/Skyman/_git/Carbon</p>\n<p>Here (and in the rest of the document) we assume that the source code is cloned into a subdirectory named Carbon. But you can select any name, by adding the target folder name at the end of the above git clone command.</p>\n<p>Although the Carbon repository is using submodules for several dependencies, it is not necessary to do a recursive clone. The CMAKE process in the following step will clone the required submodules into your local repository.</p>\n\n",
                    "title": "Checkout and Build Carbon on Windows",
                    "url": "REDACTED",
                    "filepath": "setupwinenv.md",
                    "chunk_id": "0"
                  }
                ]
              }
            }
          }
        ],
        "usage": {
          "prompt_tokens": 7044,
          "completion_tokens": 45,
          "total_tokens": 7089
        }
      }
    }
  ],
  "Variables": {}
}
