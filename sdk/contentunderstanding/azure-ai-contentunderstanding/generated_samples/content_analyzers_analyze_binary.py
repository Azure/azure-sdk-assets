# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.ai.contentunderstanding import ContentUnderstandingClient
from azure.core.credentials import AzureKeyCredential
from azure.identity import DefaultAzureCredential
from dotenv import load_dotenv

"""
# PREREQUISITES
    pip install azure-ai-contentunderstanding python-dotenv
    
    # RECOMMENDED: Use Azure CLI authentication (most common dev scenario)
    # 1. Install Azure CLI: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli
    # 2. Login: az login
    # 3. Set only the endpoint:
    export AZURE_CONTENT_UNDERSTANDING_ENDPOINT="https://your-resource-name.services.ai.azure.com/"
    
    # ALTERNATIVE: Use .env file (recommended)
    # Copy env.sample to .env and update with your endpoint
    cp env.sample .env
    # Edit .env file with your endpoint (leave key empty for DefaultAzureCredential)
    
    # FOR TESTING ONLY: Use key authentication (less secure)
    # export AZURE_CONTENT_UNDERSTANDING_KEY="your-key"  # Only for testing!
    
# USAGE
    python content_analyzers_analyze_binary.py
"""

# Load environment variables from .env file
load_dotenv()


def get_credential():
    """Get the appropriate credential based on configuration."""
    key = os.getenv("AZURE_CONTENT_UNDERSTANDING_KEY")
    
    if key and key.strip():
        print("üîë Using Azure Key authentication")
        return AzureKeyCredential(key)
    else:
        print("üîê Using DefaultAzureCredential (supports Managed Identity, Azure CLI, etc.)")
        return DefaultAzureCredential()


def save_response_to_file(response, output_dir: str = "output") -> str:
    """Save the analysis response to a JSON file."""
    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)
    
    # Generate filename with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"analysis_result_{timestamp}.json"
    filepath = os.path.join(output_dir, filename)
    
    # Convert response to dictionary for JSON serialization
    response_dict = {
        "analysis_timestamp": timestamp,
        "number_of_contents": len(response.contents) if hasattr(response, 'contents') else 0,
        "contents": []
    }
    
    if hasattr(response, 'contents') and response.contents:
        for i, content in enumerate(response.contents):
            content_dict = {
                "index": i,
                "markdown": content.markdown if hasattr(content, 'markdown') else None,
                "text": content.text if hasattr(content, 'text') else None,
                "confidence": content.confidence if hasattr(content, 'confidence') else None
            }
            response_dict["contents"].append(content_dict)
    
    # Save to file
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(response_dict, f, indent=2, ensure_ascii=False)
    
    return filepath


def main():
    # Validate environment configuration
    my_endpoint = os.getenv("AZURE_CONTENT_UNDERSTANDING_ENDPOINT")
    if not my_endpoint:
        print("‚ùå Configuration Error: AZURE_CONTENT_UNDERSTANDING_ENDPOINT environment variable is not set.")
        print("\nTo fix this:")
        print("1. Set the AZURE_CONTENT_UNDERSTANDING_ENDPOINT environment variable")
        print("2. Or create a .env file with: AZURE_CONTENT_UNDERSTANDING_ENDPOINT=your_endpoint_url")
        return 1
    
    print(f"Connecting to Azure AI Content Understanding at: {my_endpoint}")
    
    # Get appropriate credential
    try:
        credential = get_credential()
    except Exception as e:
        print(f"‚ùå Credential Error: Failed to initialize credentials: {e}")
        return 1
    
    # Initialize client
    try:
        client = ContentUnderstandingClient(
            endpoint=my_endpoint,
            credential=credential,
        )
        print("‚úì Successfully authenticated with Azure")
    except Exception as e:
        print(f"‚ùå Authentication Error: Failed to connect to Azure: {e}")
        return 1
    
    # Validate and read sample file
    sample_file = "sample_files/sample_invoice.pdf"
    if not os.path.exists(sample_file):
        print(f"‚ùå File Error: Sample file '{sample_file}' not found.")
        print(f"Please ensure the file exists in the current directory.")
        return 1
    
    print(f"‚úì Found sample file: {sample_file}")
    
    # Read file
    try:
        with open(sample_file, "rb") as f:
            file_bytes = f.read()
        print(f"‚úì Successfully read file ({len(file_bytes)} bytes)")
    except Exception as e:
        print(f"‚ùå I/O Error: Failed to read file '{sample_file}': {e}")
        return 1
    
    print("\nüöÄ Starting document analysis...")
    print("‚è≥ This may take a few minutes. Please wait...")
    
    # Perform analysis
    try:
        response = client.content_analyzers.begin_analyze_binary(
            analyzer_id="prebuilt-documentAnalyzer",
            input=file_bytes,
            content_type="application/pdf",
        ).result()
        
        print("‚úì Analysis completed successfully!")
        print(f"üìä Number of contents extracted: {len(response.contents) if hasattr(response, 'contents') else 0}")
        
    except Exception as e:
        print(f"‚ùå Analysis Error: Document analysis failed: {e}")
        return 1
    
    # Save results to file
    try:
        output_file = save_response_to_file(response)
        print(f"üíæ Analysis results saved to: {output_file}")
    except Exception as e:
        print(f"‚ùå File Save Error: Failed to save results: {e}")
        # Don't return error here as analysis was successful
    
    # Print preview of first content
    if hasattr(response, 'contents') and response.contents:
        first_content = response.contents[0]
        preview = first_content.markdown[:200] if hasattr(first_content, 'markdown') else "No markdown content"
        print(f"\nüìÑ Preview of first content:")
        print(f"{preview}...")
    
    print("\n‚úÖ Script completed successfully!")
    return 0


# x-ms-original-file: 2025-05-01-preview/ContentAnalyzers_AnalyzeBinary.json
if __name__ == "__main__":
    exit(main())
