{
  "Entries": [
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/9b937a65e7631050003420cee47e42d94d5866ffe40e89a860a58fd3a2e0794c?api-version=2023-04-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "379",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": {
        "properties": {
          "isAnonymous": true,
          "isArchived": false,
          "condaFile": "channels:\n- defaults\ndependencies:\n- python=3.8.12\n- pip=21.2.2\n- pip:\n  - --extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\n  - mldesigner==0.0.71974906\n  - mlflow\n  - azureml-mlflow\nname: example-environment\n",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Build-ID": "imgbldrun_2aa99d8",
        "Cache-Control": "no-cache",
        "Content-Length": "1362",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:29:52 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/9b937a65e7631050003420cee47e42d94d5866ffe40e89a860a58fd3a2e0794c?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-01",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "8536e02a-ed1e-4f04-8916-a9bb75882584",
        "x-ms-ratelimit-remaining-subscription-global-writes": "12000",
        "x-ms-ratelimit-remaining-subscription-writes": "800",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T112952Z:8536e02a-ed1e-4f04-8916-a9bb75882584",
        "X-MSEdge-Ref": "Ref A: 251DCF17F16447CA89EAE7F7C2FE3EA9 Ref B: MAA201060516023 Ref C: 2025-03-18T11:29:45Z",
        "x-request-time": "5.582"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/9b937a65e7631050003420cee47e42d94d5866ffe40e89a860a58fd3a2e0794c",
        "name": "9b937a65e7631050003420cee47e42d94d5866ffe40e89a860a58fd3a2e0794c",
        "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {
            "azureml.labels": ""
          },
          "isArchived": false,
          "isAnonymous": true,
          "autoDeleteSetting": null,
          "environmentType": "UserCreated",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04",
          "condaFile": "{\n  \"channels\": [\n    \"defaults\"\n  ],\n  \"dependencies\": [\n    \"python=3.8.12\",\n    \"pip=21.2.2\",\n    {\n      \"pip\": [\n        \"--extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\",\n        \"mldesigner==0.0.71974906\",\n        \"mlflow\",\n        \"azureml-mlflow\"\n      ]\n    }\n  ],\n  \"name\": \"example-environment\"\n}",
          "osType": "Linux",
          "autoRebuild": "Disabled",
          "provisioningState": "Succeeded",
          "stage": "Logged",
          "intellectualProperty": null
        },
        "systemData": {
          "createdAt": "2025-03-18T11:29:46.8069898+00:00",
          "createdBy": "Sanitized",
          "createdByType": "User",
          "lastModifiedAt": "2025-03-18T11:29:46.8069898+00:00",
          "lastModifiedBy": "Sanitized",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/9b937a65e7631050003420cee47e42d94d5866ffe40e89a860a58fd3a2e0794c?api-version=2023-04-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "379",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": {
        "properties": {
          "isAnonymous": true,
          "isArchived": false,
          "condaFile": "channels:\n- defaults\ndependencies:\n- python=3.8.12\n- pip=21.2.2\n- pip:\n  - --extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\n  - mldesigner==0.0.71974906\n  - mlflow\n  - azureml-mlflow\nname: example-environment\n",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Build-ID": "imgbldrun_2aa99d8",
        "Cache-Control": "no-cache",
        "Content-Length": "1362",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:29:54 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/9b937a65e7631050003420cee47e42d94d5866ffe40e89a860a58fd3a2e0794c?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-02",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "bf019ceb-6885-460c-92d8-236804e8c0a4",
        "x-ms-ratelimit-remaining-subscription-global-writes": "11999",
        "x-ms-ratelimit-remaining-subscription-writes": "799",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T112954Z:bf019ceb-6885-460c-92d8-236804e8c0a4",
        "X-MSEdge-Ref": "Ref A: 1CCD30AB4BC04F30B37A62E445B8EE92 Ref B: MAA201060516023 Ref C: 2025-03-18T11:29:52Z",
        "x-request-time": "0.266"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/9b937a65e7631050003420cee47e42d94d5866ffe40e89a860a58fd3a2e0794c",
        "name": "9b937a65e7631050003420cee47e42d94d5866ffe40e89a860a58fd3a2e0794c",
        "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {
            "azureml.labels": ""
          },
          "isArchived": false,
          "isAnonymous": true,
          "autoDeleteSetting": null,
          "environmentType": "UserCreated",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04",
          "condaFile": "{\n  \"channels\": [\n    \"defaults\"\n  ],\n  \"dependencies\": [\n    \"python=3.8.12\",\n    \"pip=21.2.2\",\n    {\n      \"pip\": [\n        \"--extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\",\n        \"mldesigner==0.0.71974906\",\n        \"mlflow\",\n        \"azureml-mlflow\"\n      ]\n    }\n  ],\n  \"name\": \"example-environment\"\n}",
          "osType": "Linux",
          "autoRebuild": "Disabled",
          "provisioningState": "Succeeded",
          "stage": "Logged",
          "intellectualProperty": null
        },
        "systemData": {
          "createdAt": "2025-03-18T11:29:46.8069898+00:00",
          "createdBy": "Sanitized",
          "createdByType": "User",
          "lastModifiedAt": "2025-03-18T11:29:46.8069898+00:00",
          "lastModifiedBy": "Sanitized",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/9b937a65e7631050003420cee47e42d94d5866ffe40e89a860a58fd3a2e0794c?api-version=2023-04-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "379",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": {
        "properties": {
          "isAnonymous": true,
          "isArchived": false,
          "condaFile": "channels:\n- defaults\ndependencies:\n- python=3.8.12\n- pip=21.2.2\n- pip:\n  - --extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\n  - mldesigner==0.0.71974906\n  - mlflow\n  - azureml-mlflow\nname: example-environment\n",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Build-ID": "imgbldrun_2aa99d8",
        "Cache-Control": "no-cache",
        "Content-Length": "1362",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:29:55 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/9b937a65e7631050003420cee47e42d94d5866ffe40e89a860a58fd3a2e0794c?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-02",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "66544d98-ac7d-4c40-8630-5c31b5a00229",
        "x-ms-ratelimit-remaining-subscription-global-writes": "11998",
        "x-ms-ratelimit-remaining-subscription-writes": "798",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T112956Z:66544d98-ac7d-4c40-8630-5c31b5a00229",
        "X-MSEdge-Ref": "Ref A: 19DD9F11D1BE4FE486E649263BDCB62B Ref B: MAA201060516023 Ref C: 2025-03-18T11:29:54Z",
        "x-request-time": "0.438"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/9b937a65e7631050003420cee47e42d94d5866ffe40e89a860a58fd3a2e0794c",
        "name": "9b937a65e7631050003420cee47e42d94d5866ffe40e89a860a58fd3a2e0794c",
        "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {
            "azureml.labels": ""
          },
          "isArchived": false,
          "isAnonymous": true,
          "autoDeleteSetting": null,
          "environmentType": "UserCreated",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04",
          "condaFile": "{\n  \"channels\": [\n    \"defaults\"\n  ],\n  \"dependencies\": [\n    \"python=3.8.12\",\n    \"pip=21.2.2\",\n    {\n      \"pip\": [\n        \"--extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\",\n        \"mldesigner==0.0.71974906\",\n        \"mlflow\",\n        \"azureml-mlflow\"\n      ]\n    }\n  ],\n  \"name\": \"example-environment\"\n}",
          "osType": "Linux",
          "autoRebuild": "Disabled",
          "provisioningState": "Succeeded",
          "stage": "Logged",
          "intellectualProperty": null
        },
        "systemData": {
          "createdAt": "2025-03-18T11:29:46.8069898+00:00",
          "createdBy": "Sanitized",
          "createdByType": "User",
          "lastModifiedAt": "2025-03-18T11:29:46.8069898+00:00",
          "lastModifiedBy": "Sanitized",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/388afc39-37cf-4b3e-8bb6-fc7f15da379e/versions?api-version=2023-04-01&hash=634b294c48adbaa95bcf5efb308a0fcad4c9a1e4a5e7dcf6a44403430acd7a9a&hashVersion=202208",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "17",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:30:00 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-02",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "59e47b81-d94f-4026-84bd-d05b51f4556e",
        "x-ms-ratelimit-remaining-subscription-global-reads": "16499",
        "x-ms-ratelimit-remaining-subscription-reads": "1099",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T113000Z:59e47b81-d94f-4026-84bd-d05b51f4556e",
        "X-MSEdge-Ref": "Ref A: 29A17B75C2FB4884B99AA192FBDA7E08 Ref B: MAA201060516023 Ref C: 2025-03-18T11:29:59Z",
        "x-request-time": "0.061"
      },
      "ResponseBody": {
        "value": []
      }
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/388afc39-37cf-4b3e-8bb6-fc7f15da379e/versions/1/startPendingUpload?api-version=2023-04-01",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "47",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": {
        "pendingUploadType": "TemporaryBlobReference"
      },
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "869",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:30:02 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Vary": "Accept-Encoding",
        "x-aml-cluster": "vienna-westus-02",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "73fa01dc-573a-4823-b45a-46bf063b835e",
        "x-ms-ratelimit-remaining-subscription-global-writes": "11999",
        "x-ms-ratelimit-remaining-subscription-writes": "799",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T113002Z:73fa01dc-573a-4823-b45a-46bf063b835e",
        "X-MSEdge-Ref": "Ref A: B0D8D56B44184935AA0FFC6749F37B61 Ref B: MAA201060516023 Ref C: 2025-03-18T11:30:00Z",
        "x-request-time": "0.598"
      },
      "ResponseBody": {
        "blobReferenceForConsumption": {
          "blobUri": "https://saw5gakqr75l2j2.blob.core.windows.net:443/4830284c-8448-41aa-bcdd-55399c88f511-a57rdv1m3ryfzubd791syn28uk",
          "storageAccountArmId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.Storage/storageAccounts/saw5gakqr75l2j2",
          "credential": {
            "credentialType": "SAS",
            "sasUri": "https://saw5gakqr75l2j2.blob.core.windows.net/4830284c-8448-41aa-bcdd-55399c88f511-a57rdv1m3ryfzubd791syn28uk?skoid=a7131bf7-66af-4a51-8e78-b1d7c60bfbbe&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2025-03-18T11%3A00%3A45Z&ske=2025-03-19T03%3A10%3A45Z&sks=b&skv=2019-07-07&sv=Sanitized&st=Sanitized&se=Sanitized&sr=c&sp=rcwl&sig=000000000000000000000000000000000000"
          }
        },
        "pendingUploadId": "5a8d1187-c0f4-42de-9712-f0d522f6a517",
        "pendingUploadType": "None"
      }
    },
    {
      "RequestUri": "https://Sanitized.blob.core.windows.net/4830284c-8448-41aa-bcdd-55399c88f511-a57rdv1m3ryfzubd791syn28uk/src/baisc_component.py?skoid=a7131bf7-66af-4a51-8e78-b1d7c60bfbbe&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2025-03-18T11%3A00%3A45Z&ske=2025-03-19T03%3A10%3A45Z&sks=b&skv=2019-07-07&sv=Sanitized&st=Sanitized&se=Sanitized&sr=c&sp=rcwl&sig=000000000000000000000000000000000000",
      "RequestMethod": "HEAD",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-storage-blob/12.19.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)",
        "x-ms-date": "Tue, 18 Mar 2025 11:30:01 GMT",
        "x-ms-version": "2023-11-03"
      },
      "RequestBody": null,
      "StatusCode": 404,
      "ResponseHeaders": {
        "Date": "Tue, 18 Mar 2025 11:30:02 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "Transfer-Encoding": "chunked",
        "x-ms-error-code": "BlobNotFound",
        "x-ms-version": "2023-11-03"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://Sanitized.blob.core.windows.net/4830284c-8448-41aa-bcdd-55399c88f511-a57rdv1m3ryfzubd791syn28uk/src/baisc_component.py?skoid=a7131bf7-66af-4a51-8e78-b1d7c60bfbbe&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2025-03-18T11%3A00%3A45Z&ske=2025-03-19T03%3A10%3A45Z&sks=b&skv=2019-07-07&sv=Sanitized&st=Sanitized&se=Sanitized&sr=c&sp=rcwl&sig=000000000000000000000000000000000000",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "1443",
        "Content-MD5": "zNiWfv/6Ym24qYJAsT0CDA==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.19.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 18 Mar 2025 11:30:02 GMT",
        "x-ms-version": "2023-11-03"
      },
      "RequestBody": "aW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBvcwoKZnJvbSBtbGRlc2lnbmVyLl9jb21wb25lbnRfZXhlY3V0b3IgaW1wb3J0IEV4ZWN1dG9yQmFzZQoKcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoKQpwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWNvbXBvbmVudF9pbl9udW1iZXIiLCB0eXBlPWludCkKcGFyc2VyLmFkZF9hcmd1bWVudCgiLS1jb21wb25lbnRfaW5fbnVtYmVyXzEiLCB0eXBlPWludCkKcGFyc2VyLmFkZF9hcmd1bWVudCgiLS1jb21wb25lbnRfaW5fcGF0aCIsIHR5cGU9c3RyKQpwYXJzZXIuYWRkX2FyZ3VtZW50KCItLW91dHB1dF9pbl9wYXRoIiwgdHlwZT1zdHIpCnBhcnNlci5hZGRfYXJndW1lbnQoIi0tb3V0cHV0X2luX251bWJlciIsIHR5cGU9c3RyKQoKCmFyZ3MgPSBwYXJzZXIucGFyc2VfYXJncygpCgpsaW5lcyA9IFsKICAgIGYiY29tcG9uZW50X2luX251bWJlcjoge2FyZ3MuY29tcG9uZW50X2luX251bWJlcn0iLAogICAgZiJjb21wb25lbnRfaW5fbnVtYmVyXzE6IHthcmdzLmNvbXBvbmVudF9pbl9udW1iZXJfMX0iLAogICAgZiJjb21wb25lbnRfaW5fcGF0aDoge2FyZ3MuY29tcG9uZW50X2luX3BhdGh9IiwKXQoKaWYgYXJncy5jb21wb25lbnRfaW5fbnVtYmVyIGlzIG5vdCBOb25lOgogICAgY29tcG9uZW50X2luX251bWJlciA9IGFyZ3MuY29tcG9uZW50X2luX251bWJlcgplbGlmIG9zLnBhdGguZXhpc3RzKG9zLnBhdGguam9pbihhcmdzLmNvbXBvbmVudF9pbl9wYXRoLCAib3V0cHV0LnR4dCIpKToKICAgIHdpdGggb3Blbihvcy5wYXRoLmpvaW4oYXJncy5jb21wb25lbnRfaW5fcGF0aCwgIm91dHB1dC50eHQiKSwgInIiKSBhcyBmaWxlOgogICAgICAgIGNvbnRlbnQgPSBmaWxlLnJlYWQoKQogICAgICAgIHRyeToKICAgICAgICAgICAgY29tcG9uZW50X2luX251bWJlciA9IGludChjb250ZW50KQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXIgPSBhcmdzLmNvbXBvbmVudF9pbl9udW1iZXIKZWxzZToKICAgIGNvbXBvbmVudF9pbl9udW1iZXIgPSAwCgpvdXRwdXRfaW5fbnVtID0gY29tcG9uZW50X2luX251bWJlciAtIDEKCndpdGggb3Blbihvcy5wYXRoLmpvaW4oYXJncy5vdXRwdXRfaW5fcGF0aCwgIm91dHB1dC50eHQiKSwgInciKSBhcyBmaWxlOgogICAgZmlsZS53cml0ZShzdHIob3V0cHV0X2luX251bSkpCgpjb250cm9sX291dHB1dF9jb250ZW50ID0gJ3siaXNfbnVtYmVyX2xhcmdlcl90aGFuX3plcm8iOiAiJXMiLCAib3V0cHV0X2luX251bWJlciI6ICIlcyJ9JyAlICgKICAgIHN0cihvdXRwdXRfaW5fbnVtID4gMCksCiAgICBvdXRwdXRfaW5fbnVtLAopCkV4ZWN1dG9yQmFzZS5fd3JpdGVfY29udHJvbF9vdXRwdXRzX3RvX3J1bl9oaXN0b3J5KGNvbnRyb2xfb3V0cHV0X2NvbnRlbnQ9Y29udHJvbF9vdXRwdXRfY29udGVudCkK",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "zNiWfv/6Ym24qYJAsT0CDA==",
        "Date": "Tue, 18 Mar 2025 11:30:02 GMT",
        "ETag": "\"0x8DD661039E062DF\"",
        "Last-Modified": "Tue, 18 Mar 2025 11:30:03 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "qXP+qljsVoo=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2023-11-03"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://Sanitized.blob.core.windows.net/4830284c-8448-41aa-bcdd-55399c88f511-a57rdv1m3ryfzubd791syn28uk/src/baisc_component.py?comp=metadata&skoid=a7131bf7-66af-4a51-8e78-b1d7c60bfbbe&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2025-03-18T11%3A00%3A45Z&ske=2025-03-19T03%3A10%3A45Z&sks=b&skv=2019-07-07&sv=Sanitized&st=Sanitized&se=Sanitized&sr=c&sp=rcwl&sig=000000000000000000000000000000000000",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azsdk-python-storage-blob/12.19.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)",
        "x-ms-date": "Tue, 18 Mar 2025 11:30:02 GMT",
        "x-ms-meta-name": "388afc39-37cf-4b3e-8bb6-fc7f15da379e",
        "x-ms-meta-upload_status": "completed",
        "x-ms-meta-version": "1",
        "x-ms-version": "2023-11-03"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Date": "Tue, 18 Mar 2025 11:30:02 GMT",
        "ETag": "\"0x8DD66103A08CC0C\"",
        "Last-Modified": "Tue, 18 Mar 2025 11:30:03 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2023-11-03"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/388afc39-37cf-4b3e-8bb6-fc7f15da379e/versions/1?api-version=2023-04-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "260",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": {
        "properties": {
          "properties": {
            "hash_sha256": "0000000000000",
            "hash_version": "0000000000000"
          },
          "isAnonymous": true,
          "isArchived": false,
          "codeUri": "https://saw5gakqr75l2j2.blob.core.windows.net:443/4830284c-8448-41aa-bcdd-55399c88f511-a57rdv1m3ryfzubd791syn28uk/src"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "814",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:30:05 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/388afc39-37cf-4b3e-8bb6-fc7f15da379e/versions/1?api-version=2023-04-01",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-02",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "65756395-b866-41cf-83fd-6270867918f5",
        "x-ms-ratelimit-remaining-subscription-global-writes": "11999",
        "x-ms-ratelimit-remaining-subscription-writes": "799",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T113005Z:65756395-b866-41cf-83fd-6270867918f5",
        "X-MSEdge-Ref": "Ref A: 74FBDC31A2B84832B9B299BDFFD57AE8 Ref B: MAA201060516023 Ref C: 2025-03-18T11:30:03Z",
        "x-request-time": "0.278"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/388afc39-37cf-4b3e-8bb6-fc7f15da379e/versions/1",
        "name": "1",
        "type": "Microsoft.MachineLearningServices/workspaces/codes/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {
            "hash_sha256": "0000000000000",
            "hash_version": "0000000000000"
          },
          "isArchived": false,
          "isAnonymous": false,
          "codeUri": "https://saw5gakqr75l2j2.blob.core.windows.net:443/4830284c-8448-41aa-bcdd-55399c88f511-a57rdv1m3ryfzubd791syn28uk/src",
          "provisioningState": "Succeeded"
        },
        "systemData": {
          "createdAt": "2025-03-18T11:30:05.1566709+00:00",
          "createdBy": "Sanitized",
          "createdByType": "User",
          "lastModifiedAt": "2025-03-18T11:30:05.1566709+00:00",
          "lastModifiedBy": "Sanitized",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/81a6c30b-6314-4f85-8fef-783f8b6cd507?api-version=2024-01-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "1411",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": {
        "properties": {
          "properties": {},
          "tags": {},
          "isAnonymous": true,
          "isArchived": false,
          "componentSpec": {
            "command": "python basic_component.py $[[--component_in_number ${{inputs.component_in_number}}]] $[[--component_in_number_1 ${{inputs.component_in_number_1}}]] --component_in_path ${{inputs.component_in_path}} --output_in_path ${{outputs.output_in_path}}",
            "code": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/388afc39-37cf-4b3e-8bb6-fc7f15da379e/versions/1",
            "environment": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/9b937a65e7631050003420cee47e42d94d5866ffe40e89a860a58fd3a2e0794c",
            "name": "basic_component",
            "version": "0.0.1",
            "$schema": "https://azuremlschemas.azureedge.net/latest/commandComponent.schema.json",
            "display_name": "Basic component",
            "is_deterministic": true,
            "inputs": {
              "component_in_number": {
                "type": "integer",
                "optional": true
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": true
              },
              "component_in_path": {
                "type": "uri_folder"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer"
              },
              "is_number_larger_than_zero": {
                "type": "boolean"
              }
            },
            "type": "command",
            "_source": "YAML.COMPONENT"
          }
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "2042",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:30:11 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/81a6c30b-6314-4f85-8fef-783f8b6cd507?api-version=2024-01-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-02",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "be3e6579-06e7-43da-9667-5084533ef1c6",
        "x-ms-ratelimit-remaining-subscription-global-writes": "11999",
        "x-ms-ratelimit-remaining-subscription-writes": "799",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T113011Z:be3e6579-06e7-43da-9667-5084533ef1c6",
        "X-MSEdge-Ref": "Ref A: 03D6819A390847C8B49D92E910128B39 Ref B: MAA201060516023 Ref C: 2025-03-18T11:30:09Z",
        "x-request-time": "0.604"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/5ae7a3cd-3f9c-40df-a161-bc7386219639",
        "name": "5ae7a3cd-3f9c-40df-a161-bc7386219639",
        "type": "Microsoft.MachineLearningServices/workspaces/components/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "autoDeleteSetting": null,
          "componentSpec": {
            "$schema": "https://azuremlschemas.azureedge.net/latest/commandComponent.schema.json",
            "name": "basic_component",
            "version": "0.0.1",
            "display_name": "Basic component",
            "is_deterministic": "True",
            "type": "command",
            "inputs": {
              "component_in_path": {
                "type": "uri_folder",
                "optional": "False"
              },
              "component_in_number": {
                "type": "integer",
                "optional": "True"
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": "True"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer"
              },
              "is_number_larger_than_zero": {
                "type": "boolean"
              }
            },
            "code": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/388afc39-37cf-4b3e-8bb6-fc7f15da379e/versions/1",
            "environment": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/9b937a65e7631050003420cee47e42d94d5866ffe40e89a860a58fd3a2e0794c",
            "resources": {
              "instance_count": "1"
            },
            "command": "python basic_component.py $[[--component_in_number ${{inputs.component_in_number}}]] $[[--component_in_number_1 ${{inputs.component_in_number_1}}]] --component_in_path ${{inputs.component_in_path}} --output_in_path ${{outputs.output_in_path}}"
          },
          "provisioningState": "Succeeded",
          "stage": "Development"
        },
        "systemData": {
          "createdAt": "2025-03-18T11:30:10.8505782+00:00",
          "createdBy": "Sanitized",
          "createdByType": "User",
          "lastModifiedAt": "2025-03-18T11:30:10.8505782+00:00",
          "lastModifiedBy": "Sanitized",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/1bee81a3-0567-43d6-8429-843965d608ff?api-version=2024-01-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "1738",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": {
        "properties": {
          "description": "E2E dummy train-score-eval pipeline with components defined via yaml.",
          "properties": {},
          "tags": {},
          "isAnonymous": true,
          "isArchived": false,
          "componentSpec": {
            "name": "do_while_body_pipeline_component",
            "description": "E2E dummy train-score-eval pipeline with components defined via yaml.",
            "display_name": "do_while_body_pipeline_component",
            "inputs": {
              "component_in_number": {
                "type": "integer",
                "optional": true
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": true
              },
              "component_in_path": {
                "type": "uri_folder"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer"
              },
              "is_number_larger_than_zero": {
                "type": "boolean"
              }
            },
            "type": "pipeline",
            "jobs": {
              "train_with_sample_data": {
                "name": "train_with_sample_data",
                "type": "command",
                "inputs": {
                  "component_in_number": {
                    "job_input_type": "literal",
                    "value": "${{parent.inputs.component_in_number}}"
                  },
                  "component_in_number_1": {
                    "job_input_type": "literal",
                    "value": "${{parent.inputs.component_in_number_1}}"
                  },
                  "component_in_path": {
                    "job_input_type": "literal",
                    "value": "${{parent.inputs.component_in_path}}"
                  }
                },
                "outputs": {
                  "output_in_path": {
                    "value": "${{parent.outputs.output_in_path}}",
                    "type": "literal"
                  },
                  "output_in_number": {
                    "value": "${{parent.outputs.output_in_number}}",
                    "type": "literal"
                  },
                  "is_number_larger_than_zero": {
                    "value": "${{parent.outputs.is_number_larger_than_zero}}",
                    "type": "literal"
                  }
                },
                "_source": "YAML.COMPONENT",
                "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/5ae7a3cd-3f9c-40df-a161-bc7386219639"
              }
            },
            "_source": "DSL",
            "sourceJobId": null
          }
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "1315",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:30:14 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/1bee81a3-0567-43d6-8429-843965d608ff?api-version=2024-01-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-02",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "b41110ef-dfdb-4cb9-8abc-e628b7c17a0c",
        "x-ms-ratelimit-remaining-subscription-global-writes": "11999",
        "x-ms-ratelimit-remaining-subscription-writes": "799",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T113014Z:b41110ef-dfdb-4cb9-8abc-e628b7c17a0c",
        "X-MSEdge-Ref": "Ref A: F2F07EA9347542D0B9D1624052A6C4B8 Ref B: MAA201060516023 Ref C: 2025-03-18T11:30:11Z",
        "x-request-time": "0.941"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/f92a97e1-c591-41df-ae63-1dac467c7e28",
        "name": "f92a97e1-c591-41df-ae63-1dac467c7e28",
        "type": "Microsoft.MachineLearningServices/workspaces/components/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "autoDeleteSetting": null,
          "componentSpec": {
            "name": "do_while_body_pipeline_component",
            "version": "0",
            "display_name": "do_while_body_pipeline_component",
            "is_deterministic": "False",
            "type": "pipeline",
            "description": "E2E dummy train-score-eval pipeline with components defined via yaml.",
            "inputs": {
              "component_in_path": {
                "type": "uri_folder",
                "optional": "False"
              },
              "component_in_number": {
                "type": "integer",
                "optional": "True"
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": "True"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer"
              },
              "is_number_larger_than_zero": {
                "type": "boolean"
              }
            }
          },
          "provisioningState": "Succeeded",
          "stage": "Development"
        },
        "systemData": {
          "createdAt": "2025-03-18T11:30:13.8741468+00:00",
          "createdBy": "Sanitized",
          "createdByType": "User",
          "lastModifiedAt": "2025-03-18T11:30:13.8741468+00:00",
          "lastModifiedBy": "Sanitized",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/datastores/workspaceblobstore?api-version=2024-07-01-preview",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "888",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:30:18 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Vary": "Accept-Encoding",
        "x-aml-cluster": "vienna-westus-01",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "6ff122fd-c562-4f90-9aba-ed7f0cd455db",
        "x-ms-ratelimit-remaining-subscription-global-reads": "16499",
        "x-ms-ratelimit-remaining-subscription-reads": "1099",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T113018Z:6ff122fd-c562-4f90-9aba-ed7f0cd455db",
        "X-MSEdge-Ref": "Ref A: 739863B0989B439B8D666B122C599BFC Ref B: MAA201060516023 Ref C: 2025-03-18T11:30:18Z",
        "x-request-time": "0.103"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/datastores/workspaceblobstore",
        "name": "workspaceblobstore",
        "type": "Microsoft.MachineLearningServices/workspaces/datastores",
        "properties": {
          "description": null,
          "tags": null,
          "properties": null,
          "isDefault": true,
          "credentials": {
            "credentialsType": "AccountKey"
          },
          "subscriptionId": "00000000-0000-0000-0000-000000000",
          "resourceGroup": "00000",
          "datastoreType": "AzureBlob",
          "accountName": "Sanitized",
          "containerName": "azureml-blobstore-4830284c-8448-41aa-bcdd-55399c88f511",
          "endpoint": "core.windows.net",
          "protocol": "https",
          "serviceDataAccessAuthIdentity": "WorkspaceSystemAssignedIdentity"
        },
        "systemData": {
          "createdAt": "2025-03-18T09:24:59.629721+00:00",
          "lastModifiedAt": "2025-03-18T09:25:00.8938439+00:00",
          "lastModifiedBy": "Sanitized",
          "lastModifiedByType": "Application"
        }
      }
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/datastores/workspaceblobstore/listSecrets?api-version=2024-07-01-preview",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "48",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": {
        "expirableSecret": true,
        "expireAfterHours": 1
      },
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "134",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:30:19 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-02",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "390d67a2-66bd-4c96-9a4c-d51e6b499269",
        "x-ms-ratelimit-remaining-subscription-global-writes": "11999",
        "x-ms-ratelimit-remaining-subscription-writes": "799",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T113019Z:390d67a2-66bd-4c96-9a4c-d51e6b499269",
        "X-MSEdge-Ref": "Ref A: 914790BEE64F4AACA8AC872AE86392BB Ref B: MAA201060516023 Ref C: 2025-03-18T11:30:18Z",
        "x-request-time": "0.087"
      },
      "ResponseBody": {
        "secretsType": "Sas",
        "sasToken": "?sv=Sanitized&sig=000000000000000000000000000000000000&se=Sanitized&srt=co&ss=bf&sp=rcuwdl"
      }
    },
    {
      "RequestUri": "https://Sanitized.blob.core.windows.net/azureml-blobstore-4830284c-8448-41aa-bcdd-55399c88f511/LocalUpload/00000000000000000000000000000000/e2etests/__init__.py?sv=Sanitized&sig=000000000000000000000000000000000000&se=Sanitized&srt=co&ss=bf&sp=rcuwdl",
      "RequestMethod": "HEAD",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-storage-blob/12.19.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)",
        "x-ms-date": "Tue, 18 Mar 2025 11:30:19 GMT",
        "x-ms-version": "2023-11-03"
      },
      "RequestBody": null,
      "StatusCode": 404,
      "ResponseHeaders": {
        "Date": "Tue, 18 Mar 2025 11:30:18 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "Transfer-Encoding": "chunked",
        "x-ms-error-code": "BlobNotFound",
        "x-ms-version": "2023-11-03"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://Sanitized.blob.core.windows.net/azureml-blobstore-4830284c-8448-41aa-bcdd-55399c88f511/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline_on_registry.py?sv=Sanitized&sig=000000000000000000000000000000000000&se=Sanitized&srt=co&ss=bf&sp=rcuwdl",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "4536",
        "Content-MD5": "d1TaRP31HP1J+Hb81i1/OQ==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.19.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 18 Mar 2025 11:30:19 GMT",
        "x-ms-version": "2023-11-03"
      },
      "RequestBody": "ZnJvbSBwYXRobGliIGltcG9ydCBQYXRoDQoNCmltcG9ydCBweXRlc3QNCmZyb20gYXp1cmUuY29yZS5leGNlcHRpb25zIGltcG9ydCBSZXNvdXJjZU5vdEZvdW5kRXJyb3INCg0KZnJvbSBhenVyZS5haS5tbCBpbXBvcnQgSW5wdXQsIE1MQ2xpZW50LCBsb2FkX2NvbXBvbmVudCwgbG9hZF9tb2RlbA0KZnJvbSBhenVyZS5haS5tbC5jb25zdGFudHMgaW1wb3J0IEFzc2V0VHlwZXMNCmZyb20gYXp1cmUuYWkubWwuZHNsIGltcG9ydCBwaXBlbGluZQ0KZnJvbSBkZXZ0b29sc190ZXN0dXRpbHMgaW1wb3J0IEF6dXJlUmVjb3JkZWRUZXN0Q2FzZSwgaXNfbGl2ZQ0KZnJvbSB0ZXN0X3V0aWxpdGllcy51dGlscyBpbXBvcnQgX1BZVEVTVF9USU1FT1VUX01FVEhPRCwgYXNzZXJ0X2pvYl9jYW5jZWwNCmZyb20gLi5fdXRpbCBpbXBvcnQgX0RTTF9USU1FT1VUX1NFQ09ORA0KDQoNCmRlZiBhc3NlcnRfcGlwZWxpbmVfam9iX2NhbmNlbChjbGllbnQ6IE1MQ2xpZW50LCBzY29yZV9mdW5jLCBwaXBlbGluZV9tb2RlbF9pbnB1dCwgcGlwZWxpbmVfdGVzdF9kYXRhKToNCiAgICBAcGlwZWxpbmUNCiAgICBkZWYgc2NvcmVfcGlwZWxpbmUobW9kZWxfaW5wdXQsIHRlc3RfZGF0YSk6DQogICAgICAgIHNjb3JlID0gc2NvcmVfZnVuYyhtb2RlbF9pbnB1dD1tb2RlbF9pbnB1dCwgdGVzdF9kYXRhPXRlc3RfZGF0YSkgICMgbm9xYTogRjg0MQ0KICAgICAgICBzY29yZV9kdXBsaWNhdGUgPSBzY29yZV9mdW5jKG1vZGVsX2lucHV0PW1vZGVsX2lucHV0LCB0ZXN0X2RhdGE9dGVzdF9kYXRhKSAgIyBub3FhOiBGODQxDQoNCiAgICBwaXBlbGluZV9qb2IgPSBzY29yZV9waXBlbGluZShtb2RlbF9pbnB1dD1waXBlbGluZV9tb2RlbF9pbnB1dCwgdGVzdF9kYXRhPXBpcGVsaW5lX3Rlc3RfZGF0YSkNCiAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImNwdS1jbHVzdGVyIg0KICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lX2pvYiwgY2xpZW50KQ0KDQoNCkBweXRlc3QubWFyay5za2lwaWYoY29uZGl0aW9uPW5vdCBpc19saXZlKCksIHJlYXNvbj0icmVnaXN0cnkgdGVzdCwgbWF5IGZhaWwgaW4gcGxheWJhY2sgbW9kZSIpDQpAcHl0ZXN0Lm1hcmsudXNlZml4dHVyZXMoImVuYWJsZV9waXBlbGluZV9wcml2YXRlX3ByZXZpZXdfZmVhdHVyZXMiLCAicmVjb3JkZWRfdGVzdCIpDQpAcHl0ZXN0Lm1hcmsudGltZW91dCh0aW1lb3V0PV9EU0xfVElNRU9VVF9TRUNPTkQsIG1ldGhvZD1fUFlURVNUX1RJTUVPVVRfTUVUSE9EKQ0KQHB5dGVzdC5tYXJrLmUyZXRlc3QNCkBweXRlc3QubWFyay5waXBlbGluZV90ZXN0DQpjbGFzcyBUZXN0RFNMUGlwZWxpbmVPblJlZ2lzdHJ5KEF6dXJlUmVjb3JkZWRUZXN0Q2FzZSk6DQogICAgdGVzdF9kYXRhID0gSW5wdXQoDQogICAgICAgIHR5cGU9QXNzZXRUeXBlcy5VUklfRklMRSwNCiAgICAgICAgcGF0aD0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvcGlwZWxpbmVfam9icy9qb2Jfd2l0aF9yZWdpc3RyeV9tb2RlbF9hc19pbnB1dC9kYXRhL3NhbXBsZTEuY3N2IiwNCiAgICApDQoNCiAgICBkZWYgdGVzdF9waXBlbGluZV9qb2JfY3JlYXRlX3dpdGhfcmVnaXN0ZXJlZF9jb21wb25lbnRfb25fcmVnaXN0cnkoc2VsZiwgcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudDogTUxDbGllbnQpOg0KICAgICAgICBsb2NhbF9jb21wb25lbnQgPSBsb2FkX2NvbXBvbmVudCgiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9iYXNpY19jb21wb25lbnRfY29kZV9sb2NhbF9wYXRoLnltbCIpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGNyZWF0ZWRfY29tcG9uZW50ID0gcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudC5jb21wb25lbnRzLmdldCgNCiAgICAgICAgICAgICAgICBsb2NhbF9jb21wb25lbnQubmFtZSwgdmVyc2lvbj1sb2NhbF9jb21wb25lbnQudmVyc2lvbg0KICAgICAgICAgICAgKQ0KICAgICAgICBleGNlcHQgUmVzb3VyY2VOb3RGb3VuZEVycm9yOg0KICAgICAgICAgICAgY3JlYXRlZF9jb21wb25lbnQgPSBwaXBlbGluZXNfcmVnaXN0cnlfY2xpZW50LmNvbXBvbmVudHMuY3JlYXRlX29yX3VwZGF0ZShsb2NhbF9jb21wb25lbnQpDQoNCiAgICAgICAgQHBpcGVsaW5lDQogICAgICAgIGRlZiBzYW1wbGVfcGlwZWxpbmUoKToNCiAgICAgICAgICAgIGNyZWF0ZWRfY29tcG9uZW50KCkNCg0KICAgICAgICBwaXBlbGluZV9qb2IgPSBzYW1wbGVfcGlwZWxpbmUoKQ0KICAgICAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImNwdS1jbHVzdGVyIg0KICAgICAgICBhc3NlcnQgcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudC5qb2JzLnZhbGlkYXRlKHBpcGVsaW5lX2pvYikucGFzc2VkDQoNCiAgICAjIHRoaXMgdGVzdCB3aWxsIGJyZWFrIGluIHBsYXliYWNrIG1vZGUsIHNvIGluY2x1ZGUgaXQgaW4gbGl2ZSB0ZXN0IG9ubHkNCiAgICBkZWYgdGVzdF9waXBlbGluZV93aXRoX2xvY2FsX2NvbXBvbmVudF9hbmRfcmVnaXN0cnlfbW9kZWxfYXNfaW5wdXQoc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgICMgbG9hZF9jb21wb25lbnQNCiAgICAgICAgc2NvcmVfZnVuYyA9IGxvYWRfY29tcG9uZW50KCIuL3Rlc3RzL3Rlc3RfY29uZmlncy9waXBlbGluZV9qb2JzL2pvYl93aXRoX3JlZ2lzdHJ5X21vZGVsX2FzX2lucHV0L3Njb3JlLnltbCIpDQoNCiAgICAgICAgcGlwZWxpbmVfc2NvcmVfbW9kZWwgPSBJbnB1dCgNCiAgICAgICAgICAgIHR5cGU9ImN1c3RvbV9tb2RlbCIsIHBhdGg9ImF6dXJlbWw6Ly9yZWdpc3RyaWVzL3Nkay10ZXN0L21vZGVscy9pcmlzX21vZGVsL3ZlcnNpb25zLzEiDQogICAgICAgICkNCg0KICAgICAgICBhc3NlcnRfcGlwZWxpbmVfam9iX2NhbmNlbChjbGllbnQsIHNjb3JlX2Z1bmMsIHBpcGVsaW5lX3Njb3JlX21vZGVsLCBzZWxmLnRlc3RfZGF0YSkNCg0KICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3dpdGhfbG9jYWxfY29tcG9uZW50X2FuZF9yZWdpc3RyeV9tb2RlbF9hc19pbnB1dF93aXRoX21vZGVsX2lucHV0KA0KICAgICAgICBzZWxmLCBjbGllbnQ6IE1MQ2xpZW50LCBwaXBlbGluZXNfcmVnaXN0cnlfY2xpZW50OiBNTENsaWVudA0KICAgICk6DQogICAgICAgICMgbG9hZF9jb21wb25lbnQNCiAgICAgICAgc2NvcmVfZnVuYyA9IGxvYWRfY29tcG9uZW50KCIuL3Rlc3RzL3Rlc3RfY29uZmlncy9waXBlbGluZV9qb2JzL2pvYl93aXRoX3JlZ2lzdHJ5X21vZGVsX2FzX2lucHV0L3Njb3JlLnltbCIpDQoNCiAgICAgICAgbW9kZWxfcGF0aCA9IFBhdGgoIi4vdGVzdHMvdGVzdF9jb25maWdzL21vZGVsL21vZGVsX2lyaXMueW1sIikNCiAgICAgICAgbW9kZWxfZW50aXR5ID0gbG9hZF9tb2RlbChtb2RlbF9wYXRoKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBwaXBlbGluZV9zY29yZV9tb2RlbCA9IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQubW9kZWxzLmdldCgNCiAgICAgICAgICAgICAgICBuYW1lPW1vZGVsX2VudGl0eS5uYW1lLCB2ZXJzaW9uPW1vZGVsX2VudGl0eS52ZXJzaW9uDQogICAgICAgICAgICApDQogICAgICAgIGV4Y2VwdCBSZXNvdXJjZU5vdEZvdW5kRXJyb3I6DQogICAgICAgICAgICBtb2RlbF9lbnRpdHkgPSBwaXBlbGluZXNfcmVnaXN0cnlfY2xpZW50Lm1vZGVscy5jcmVhdGVfb3JfdXBkYXRlKG1vZGVsX2VudGl0eSkNCiAgICAgICAgICAgIHBpcGVsaW5lX3Njb3JlX21vZGVsID0gcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudC5tb2RlbHMuZ2V0KA0KICAgICAgICAgICAgICAgIG5hbWU9bW9kZWxfZW50aXR5Lm5hbWUsIHZlcnNpb249bW9kZWxfZW50aXR5LnZlcnNpb24NCiAgICAgICAgICAgICkNCg0KICAgICAgICBhc3NlcnRfcGlwZWxpbmVfam9iX2NhbmNlbChjbGllbnQsIHNjb3JlX2Z1bmMsIHBpcGVsaW5lX3Njb3JlX21vZGVsLCBzZWxmLnRlc3RfZGF0YSkNCg0KICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3dpdGhfcmVnaXN0cnlfY29tcG9uZW50X2FuZF9tb2RlbF9hc19pbnB1dCgNCiAgICAgICAgc2VsZiwgY2xpZW50OiBNTENsaWVudCwgcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudDogTUxDbGllbnQNCiAgICApOg0KICAgICAgICAjIGxvYWRfY29tcG9uZW50DQogICAgICAgIHNjb3JlX2NvbXBvbmVudF9uYW1lLCBjb21wb25lbnRfdmVyc2lvbiA9ICJzY29yZV9jb21wb25lbnQiLCAiMiINCiAgICAgICAgc2NvcmVfZnVuYyA9IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQuY29tcG9uZW50cy5nZXQobmFtZT1zY29yZV9jb21wb25lbnRfbmFtZSwgdmVyc2lvbj1jb21wb25lbnRfdmVyc2lvbikNCg0KICAgICAgICBwaXBlbGluZV9zY29yZV9tb2RlbCA9IElucHV0KA0KICAgICAgICAgICAgdHlwZT0ibWxmbG93X21vZGVsIiwgcGF0aD0iYXp1cmVtbDovL3JlZ2lzdHJpZXMvc2RrLXRlc3QvbW9kZWxzL2lyaXNfbW9kZWwvdmVyc2lvbnMvMSINCiAgICAgICAgKQ0KDQogICAgICAgIGFzc2VydF9waXBlbGluZV9qb2JfY2FuY2VsKGNsaWVudCwgc2NvcmVfZnVuYywgcGlwZWxpbmVfc2NvcmVfbW9kZWwsIHNlbGYudGVzdF9kYXRhKQ0K",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "d1TaRP31HP1J+Hb81i1/OQ==",
        "Date": "Tue, 18 Mar 2025 11:30:19 GMT",
        "ETag": "\"0x8DD661043E2AF5C\"",
        "Last-Modified": "Tue, 18 Mar 2025 11:30:20 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "0cWl0GL+lYU=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2023-11-03"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://Sanitized.blob.core.windows.net/azureml-blobstore-4830284c-8448-41aa-bcdd-55399c88f511/LocalUpload/00000000000000000000000000000000/e2etests/test_controlflow_pipeline.py?sv=Sanitized&sig=000000000000000000000000000000000000&se=Sanitized&srt=co&ss=bf&sp=rcuwdl",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "45409",
        "Content-MD5": "eBc1OlQJYEK71KYfOY1ixA==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.19.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 18 Mar 2025 11:30:19 GMT",
        "x-ms-version": "2023-11-03"
      },
      "RequestBody": "",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "eBc1OlQJYEK71KYfOY1ixA==",
        "Date": "Tue, 18 Mar 2025 11:30:19 GMT",
        "ETag": "\"0x8DD6610442B7483\"",
        "Last-Modified": "Tue, 18 Mar 2025 11:30:20 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "Dgv87Lk3Yhc=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2023-11-03"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://Sanitized.blob.core.windows.net/azureml-blobstore-4830284c-8448-41aa-bcdd-55399c88f511/LocalUpload/00000000000000000000000000000000/e2etests/__init__.py?sv=Sanitized&sig=000000000000000000000000000000000000&se=Sanitized&srt=co&ss=bf&sp=rcuwdl",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.19.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 18 Mar 2025 11:30:19 GMT",
        "x-ms-version": "2023-11-03"
      },
      "RequestBody": null,
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "1B2M2Y8AsgTpgAmY7PhCfg==",
        "Date": "Tue, 18 Mar 2025 11:30:20 GMT",
        "ETag": "\"0x8DD66104438D30F\"",
        "Last-Modified": "Tue, 18 Mar 2025 11:30:20 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "AAAAAAAAAAA=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2023-11-03"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://Sanitized.blob.core.windows.net/azureml-blobstore-4830284c-8448-41aa-bcdd-55399c88f511/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_fl.py?sv=Sanitized&sig=000000000000000000000000000000000000&se=Sanitized&srt=co&ss=bf&sp=rcuwdl",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "10689",
        "Content-MD5": "inmxw/YWaah2Xwl6ksU/EQ==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.19.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 18 Mar 2025 11:30:19 GMT",
        "x-ms-version": "2023-11-03"
      },
      "RequestBody": "",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "inmxw/YWaah2Xwl6ksU/EQ==",
        "Date": "Tue, 18 Mar 2025 11:30:20 GMT",
        "ETag": "\"0x8DD6610443A3107\"",
        "Last-Modified": "Tue, 18 Mar 2025 11:30:20 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "d3pe6wBZ/xY=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2023-11-03"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://Sanitized.blob.core.windows.net/azureml-blobstore-4830284c-8448-41aa-bcdd-55399c88f511/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline_samples.py?sv=Sanitized&sig=000000000000000000000000000000000000&se=Sanitized&srt=co&ss=bf&sp=rcuwdl",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "20454",
        "Content-MD5": "Vf2ZygBH6xuvOI6CWq1bOA==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.19.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 18 Mar 2025 11:30:19 GMT",
        "x-ms-version": "2023-11-03"
      },
      "RequestBody": "",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "Vf2ZygBH6xuvOI6CWq1bOA==",
        "Date": "Tue, 18 Mar 2025 11:30:20 GMT",
        "ETag": "\"0x8DD6610445B01A6\"",
        "Last-Modified": "Tue, 18 Mar 2025 11:30:20 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "RKyVH6uxVFA=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2023-11-03"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://Sanitized.blob.core.windows.net/azureml-blobstore-4830284c-8448-41aa-bcdd-55399c88f511/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline_with_specific_nodes.py?sv=Sanitized&sig=000000000000000000000000000000000000&se=Sanitized&srt=co&ss=bf&sp=rcuwdl",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "16882",
        "Content-MD5": "0zrIgAIcdsdL5/d+qWPVyQ==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.19.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 18 Mar 2025 11:30:19 GMT",
        "x-ms-version": "2023-11-03"
      },
      "RequestBody": "",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "0zrIgAIcdsdL5/d+qWPVyQ==",
        "Date": "Tue, 18 Mar 2025 11:30:20 GMT",
        "ETag": "\"0x8DD6610445C38BF\"",
        "Last-Modified": "Tue, 18 Mar 2025 11:30:20 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "dy8lvOImOJs=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2023-11-03"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://Sanitized.blob.core.windows.net/azureml-blobstore-4830284c-8448-41aa-bcdd-55399c88f511/LocalUpload/00000000000000000000000000000000/e2etests/test_automl_dsl_pipeline.py?sv=Sanitized&sig=000000000000000000000000000000000000&se=Sanitized&srt=co&ss=bf&sp=rcuwdl",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "37046",
        "Content-MD5": "3+kIw2DCmQNLqUlerPcLQA==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.19.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 18 Mar 2025 11:30:19 GMT",
        "x-ms-version": "2023-11-03"
      },
      "RequestBody": "",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "3+kIw2DCmQNLqUlerPcLQA==",
        "Date": "Tue, 18 Mar 2025 11:30:20 GMT",
        "ETag": "\"0x8DD6610446189FB\"",
        "Last-Modified": "Tue, 18 Mar 2025 11:30:20 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "XBJkkOAvurw=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2023-11-03"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://Sanitized.blob.core.windows.net/azureml-blobstore-4830284c-8448-41aa-bcdd-55399c88f511/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline.py?sv=Sanitized&sig=000000000000000000000000000000000000&se=Sanitized&srt=co&ss=bf&sp=rcuwdl",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "164031",
        "Content-MD5": "h+m2S3osc23Kzhh2XOO+8A==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.19.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 18 Mar 2025 11:30:19 GMT",
        "x-ms-version": "2023-11-03"
      },
      "RequestBody": "",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "h+m2S3osc23Kzhh2XOO+8A==",
        "Date": "Tue, 18 Mar 2025 11:30:21 GMT",
        "ETag": "\"0x8DD661044D3EF75\"",
        "Last-Modified": "Tue, 18 Mar 2025 11:30:21 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "1/ECmgx1RtY=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2023-11-03"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://Sanitized.blob.core.windows.net/azureml-blobstore-4830284c-8448-41aa-bcdd-55399c88f511/LocalUpload/00000000000000000000000000000000/e2etests/__init__.py?comp=metadata&sv=Sanitized&sig=000000000000000000000000000000000000&se=Sanitized&srt=co&ss=bf&sp=rcuwdl",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azsdk-python-storage-blob/12.19.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)",
        "x-ms-date": "Tue, 18 Mar 2025 11:30:21 GMT",
        "x-ms-meta-name": "704a24c9-4e1f-46f9-a37b-fef2e1d65082",
        "x-ms-meta-upload_status": "completed",
        "x-ms-meta-version": "a3d3a5be-199c-4c66-a1a3-5b893d3aa560",
        "x-ms-version": "2023-11-03"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Date": "Tue, 18 Mar 2025 11:30:21 GMT",
        "ETag": "\"0x8DD661044FAFAB0\"",
        "Last-Modified": "Tue, 18 Mar 2025 11:30:21 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2023-11-03"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/elated_yam_jplp83cys8?api-version=2024-01-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "3487",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": {
        "properties": {
          "properties": {},
          "tags": {},
          "displayName": "pipeline_with_do_while",
          "experimentName": "azure-ai-ml",
          "isArchived": false,
          "jobType": "Pipeline",
          "inputs": {
            "component_in_number": {
              "jobInputType": "literal",
              "value": "2"
            },
            "component_in_path": {
              "uri": "azureml://datastores/workspaceblobstore/paths/LocalUpload/00000000000000000000000000000000/e2etests/",
              "jobInputType": "uri_folder"
            }
          },
          "jobs": {
            "do_while_body_pipeline": {
              "name": "do_while_body_pipeline",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/f92a97e1-c591-41df-ae63-1dac467c7e28"
            },
            "do_while_with_pipeline": {
              "body": "${{parent.jobs.do_while_body_pipeline}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "${{parent.jobs.do_while_body_pipeline.outputs.output_in_number}}": [
                  "component_in_number",
                  "component_in_number_1"
                ],
                "output_in_path": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "command_component": {
              "name": "command_component",
              "type": "command",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "YAML.COMPONENT",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/5ae7a3cd-3f9c-40df-a161-bc7386219639"
            },
            "do_while_with_command_component": {
              "body": "${{parent.jobs.command_component}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "output_in_number": [
                  "component_in_number",
                  "component_in_number_1"
                ],
                "output_in_path": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "basic_component": {
              "name": "basic_component",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.do_while_body_pipeline.outputs.output_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.command_component.outputs.output_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.do_while_body_pipeline.outputs.output_in_path}}"
                }
              },
              "outputs": {
                "output_in_path": {
                  "value": "${{parent.outputs.output_in_path}}",
                  "type": "literal"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/f92a97e1-c591-41df-ae63-1dac467c7e28"
            }
          },
          "outputs": {
            "output_in_path": {
              "jobOutputType": "uri_folder"
            }
          },
          "settings": {
            "default_compute": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/computes/cpu-cluster",
            "_source": "DSL"
          }
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "4674",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:30:23 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/elated_yam_jplp83cys8?api-version=2024-01-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-01",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "2a144353-c4fe-47d8-8afd-e94e876909ff",
        "x-ms-ratelimit-remaining-subscription-global-writes": "11999",
        "x-ms-ratelimit-remaining-subscription-writes": "799",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T113023Z:2a144353-c4fe-47d8-8afd-e94e876909ff",
        "X-MSEdge-Ref": "Ref A: 68AC84C6308448C3BC51B22A67B7EF15 Ref B: MAA201060516023 Ref C: 2025-03-18T11:30:22Z",
        "x-request-time": "0.359"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/elated_yam_jplp83cys8",
        "name": "elated_yam_jplp83cys8",
        "type": "Microsoft.MachineLearningServices/workspaces/jobs",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "displayName": "pipeline_with_do_while",
          "status": "NotStarted",
          "experimentName": "azure-ai-ml",
          "services": {
            "Tracking": {
              "jobServiceType": "Tracking",
              "port": null,
              "endpoint": "azureml://westus.api.azureml.ms/mlflow/v1.0/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000?",
              "status": null,
              "errorMessage": null,
              "properties": null,
              "nodes": null
            },
            "Studio": {
              "jobServiceType": "Studio",
              "port": null,
              "endpoint": "https://ml.azure.com/runs/elated_yam_jplp83cys8?wsid=/subscriptions/00000000-0000-0000-0000-000000000/resourcegroups/00000/workspaces/00000",
              "status": null,
              "errorMessage": null,
              "properties": null,
              "nodes": null
            }
          },
          "computeId": null,
          "isArchived": false,
          "identity": null,
          "componentId": null,
          "notificationSetting": null,
          "secretsConfiguration": null,
          "jobType": "Pipeline",
          "settings": {
            "default_compute": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/computes/cpu-cluster",
            "_source": "DSL"
          },
          "jobs": {
            "do_while_body_pipeline": {
              "name": "do_while_body_pipeline",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/f92a97e1-c591-41df-ae63-1dac467c7e28"
            },
            "do_while_with_pipeline": {
              "body": "${{parent.jobs.do_while_body_pipeline}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "${{parent.jobs.do_while_body_pipeline.outputs.output_in_number}}": [
                  "component_in_number",
                  "component_in_number_1"
                ],
                "output_in_path": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "command_component": {
              "name": "command_component",
              "type": "command",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "YAML.COMPONENT",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/5ae7a3cd-3f9c-40df-a161-bc7386219639"
            },
            "do_while_with_command_component": {
              "body": "${{parent.jobs.command_component}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "output_in_number": [
                  "component_in_number",
                  "component_in_number_1"
                ],
                "output_in_path": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "basic_component": {
              "name": "basic_component",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.do_while_body_pipeline.outputs.output_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.command_component.outputs.output_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.do_while_body_pipeline.outputs.output_in_path}}"
                }
              },
              "outputs": {
                "output_in_path": {
                  "value": "${{parent.outputs.output_in_path}}",
                  "type": "literal"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/f92a97e1-c591-41df-ae63-1dac467c7e28"
            }
          },
          "inputs": {
            "component_in_number": {
              "description": null,
              "jobInputType": "literal",
              "value": "2"
            },
            "component_in_path": {
              "description": null,
              "uri": "azureml://datastores/workspaceblobstore/paths/LocalUpload/00000000000000000000000000000000/e2etests/",
              "mode": "ReadOnlyMount",
              "pathOnCompute": null,
              "jobInputType": "uri_folder"
            }
          },
          "outputs": {
            "output_in_path": {
              "description": null,
              "uri": null,
              "assetName": null,
              "assetVersion": null,
              "mode": "ReadWriteMount",
              "pathOnCompute": null,
              "autoDeleteSetting": null,
              "jobOutputType": "uri_folder"
            }
          },
          "sourceJobId": null
        },
        "systemData": {
          "createdAt": "2025-03-18T11:30:23.4897728+00:00",
          "createdBy": "Sanitized",
          "createdByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/elated_yam_jplp83cys8/cancel?api-version=2023-04-01-preview",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 202,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "4",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:30:28 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778942289487110&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=kpgwKs2bgMSVMY5LGnrtgqFaaPJ_wJLAsB-wL36LtJwY6sAEDcSzt-kSPIliNJapY0tlCQuEexewoEU-7sCCvx6-7RK9Lvt2JXsqaMFLSKgC9TPWE6E34B9GKedhIEUI88AsKP57dl6UvDQ8r6WCxiI0VNspw0A7Wwp33ZAYicsc1t_gJDh1jFuvegzToNzD2vKLe7KwpEi7biqhZs9f626sH5SAdgn73B4XzmJSEJuTYAbhJmAgbcQjJloXOIoUoVzdcfWHw-wDeQ_LFxBOBAJGu5cgb8jiF4ZXFsFUHw6owskCV-fnuZD8e1-xRoCB5-Nr_cpTGMsjIMemr25JUA&h=d9BmvIFOn3iakEKvIRyKtUhntCT_jpBS-6JQpQ9CieA",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-01",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-async-operation-timeout": "PT1H",
        "x-ms-correlation-request-id": "9e682164-e59f-4eff-b899-81b96c5bbfc3",
        "x-ms-ratelimit-remaining-subscription-global-writes": "11999",
        "x-ms-ratelimit-remaining-subscription-writes": "799",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T113028Z:9e682164-e59f-4eff-b899-81b96c5bbfc3",
        "X-MSEdge-Ref": "Ref A: A970F8565FAF43048A1BEED0C08D0464 Ref B: MAA201060516023 Ref C: 2025-03-18T11:30:27Z",
        "x-request-time": "0.704"
      },
      "ResponseBody": "null"
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778942289487110&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=kpgwKs2bgMSVMY5LGnrtgqFaaPJ_wJLAsB-wL36LtJwY6sAEDcSzt-kSPIliNJapY0tlCQuEexewoEU-7sCCvx6-7RK9Lvt2JXsqaMFLSKgC9TPWE6E34B9GKedhIEUI88AsKP57dl6UvDQ8r6WCxiI0VNspw0A7Wwp33ZAYicsc1t_gJDh1jFuvegzToNzD2vKLe7KwpEi7biqhZs9f626sH5SAdgn73B4XzmJSEJuTYAbhJmAgbcQjJloXOIoUoVzdcfWHw-wDeQ_LFxBOBAJGu5cgb8jiF4ZXFsFUHw6owskCV-fnuZD8e1-xRoCB5-Nr_cpTGMsjIMemr25JUA&h=d9BmvIFOn3iakEKvIRyKtUhntCT_jpBS-6JQpQ9CieA",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 202,
      "ResponseHeaders": {
        "Azure-AsyncOperation": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778942299329157&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=F9zN1_jYrhcFR6cDF-mVvF4uwbD6eZGg5iBahub9ALJXIjucN7rQb7d21mlIQ-rOuOXtpz8eDyGGu_XJnJOTViPc2AHet1toeSHV6EaS16FY5PAALL06pFjgl7JtR68NAIjDIq6cxG-80w_DmNndpnh2BUyjnVAnbj_PuXXHJI4xF2jrRDP39K-O3iUbeCWdUTYct5m731zy8-SnAcFBg4OcIVswWpzcdt7JUqgXwcDJUAnD9XG70kn0tSKy2YHLWZOCfmHQPmKeTz_vZ4EYjLSZvRoPu1JaGNabiDRmJeSu8BGpSnAKjFVq3V9O5avLOvH1HW8L-MnhBXVngW919Q&h=kcdaIOVXCek0hFDM8aTj_ySorChEh8exAQBbvRtgtFA",
        "Cache-Control": "no-cache",
        "Content-Length": "2",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:30:29 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778942299329157&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=F9zN1_jYrhcFR6cDF-mVvF4uwbD6eZGg5iBahub9ALJXIjucN7rQb7d21mlIQ-rOuOXtpz8eDyGGu_XJnJOTViPc2AHet1toeSHV6EaS16FY5PAALL06pFjgl7JtR68NAIjDIq6cxG-80w_DmNndpnh2BUyjnVAnbj_PuXXHJI4xF2jrRDP39K-O3iUbeCWdUTYct5m731zy8-SnAcFBg4OcIVswWpzcdt7JUqgXwcDJUAnD9XG70kn0tSKy2YHLWZOCfmHQPmKeTz_vZ4EYjLSZvRoPu1JaGNabiDRmJeSu8BGpSnAKjFVq3V9O5avLOvH1HW8L-MnhBXVngW919Q&h=kcdaIOVXCek0hFDM8aTj_ySorChEh8exAQBbvRtgtFA",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-02",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "d5ce96a2-9553-4508-8101-0c8c9ea72206",
        "x-ms-ratelimit-remaining-subscription-global-reads": "16499",
        "x-ms-ratelimit-remaining-subscription-reads": "1099",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T113029Z:d5ce96a2-9553-4508-8101-0c8c9ea72206",
        "X-MSEdge-Ref": "Ref A: C943813E0D5F45B7BF6B0A5C6C790270 Ref B: MAA201060516023 Ref C: 2025-03-18T11:30:29Z",
        "x-request-time": "0.047"
      },
      "ResponseBody": {}
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778942299329157&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=F9zN1_jYrhcFR6cDF-mVvF4uwbD6eZGg5iBahub9ALJXIjucN7rQb7d21mlIQ-rOuOXtpz8eDyGGu_XJnJOTViPc2AHet1toeSHV6EaS16FY5PAALL06pFjgl7JtR68NAIjDIq6cxG-80w_DmNndpnh2BUyjnVAnbj_PuXXHJI4xF2jrRDP39K-O3iUbeCWdUTYct5m731zy8-SnAcFBg4OcIVswWpzcdt7JUqgXwcDJUAnD9XG70kn0tSKy2YHLWZOCfmHQPmKeTz_vZ4EYjLSZvRoPu1JaGNabiDRmJeSu8BGpSnAKjFVq3V9O5avLOvH1HW8L-MnhBXVngW919Q&h=kcdaIOVXCek0hFDM8aTj_ySorChEh8exAQBbvRtgtFA",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 202,
      "ResponseHeaders": {
        "Azure-AsyncOperation": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778942607844483&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=DzBvcFeRvyFEF20jEc6ADU944nyG5e9sylhXucQivAQESc1-XCFVh9bP41FGa9Ci9NhzyITSLR_JKVD1rhXBZcMLsPaL4uI1pqhaMW6NH1HRZfmWCOWGfWPu3Onm7M_Slss8U0_8KIp8-cgffIQmQ38t3gSN9jXDg1UAv62sY5c91yn7Cd8wOHyby-66ZeGImnup0ABr7K6C6T-LBt0OLTHYOuJ5iUCke9uglFWiCyiSFdpCiTqTf4Gb_jRJdMSqsXZcFMuuaxojwYxoOc2EiL_J_beLEQYOiLAdAmz3DGK1j3kcpFyk8UxyfqwfQkh58CWm_6u96ga3CR_tl9eEKA&h=tE9RLt55WKyujoqKdisH5olxoMysFUdXn09paO4KN7E",
        "Cache-Control": "no-cache",
        "Content-Length": "2",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:31:00 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778942607844483&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=DzBvcFeRvyFEF20jEc6ADU944nyG5e9sylhXucQivAQESc1-XCFVh9bP41FGa9Ci9NhzyITSLR_JKVD1rhXBZcMLsPaL4uI1pqhaMW6NH1HRZfmWCOWGfWPu3Onm7M_Slss8U0_8KIp8-cgffIQmQ38t3gSN9jXDg1UAv62sY5c91yn7Cd8wOHyby-66ZeGImnup0ABr7K6C6T-LBt0OLTHYOuJ5iUCke9uglFWiCyiSFdpCiTqTf4Gb_jRJdMSqsXZcFMuuaxojwYxoOc2EiL_J_beLEQYOiLAdAmz3DGK1j3kcpFyk8UxyfqwfQkh58CWm_6u96ga3CR_tl9eEKA&h=tE9RLt55WKyujoqKdisH5olxoMysFUdXn09paO4KN7E",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-01",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "ad42a627-4668-48db-a961-10193a7c7aab",
        "x-ms-ratelimit-remaining-subscription-global-reads": "16499",
        "x-ms-ratelimit-remaining-subscription-reads": "1099",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T113100Z:ad42a627-4668-48db-a961-10193a7c7aab",
        "X-MSEdge-Ref": "Ref A: 3880E7DAB7884022B27FECB357C6B18B Ref B: MAA201060516023 Ref C: 2025-03-18T11:31:00Z",
        "x-request-time": "0.035"
      },
      "ResponseBody": {}
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778942607844483&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=DzBvcFeRvyFEF20jEc6ADU944nyG5e9sylhXucQivAQESc1-XCFVh9bP41FGa9Ci9NhzyITSLR_JKVD1rhXBZcMLsPaL4uI1pqhaMW6NH1HRZfmWCOWGfWPu3Onm7M_Slss8U0_8KIp8-cgffIQmQ38t3gSN9jXDg1UAv62sY5c91yn7Cd8wOHyby-66ZeGImnup0ABr7K6C6T-LBt0OLTHYOuJ5iUCke9uglFWiCyiSFdpCiTqTf4Gb_jRJdMSqsXZcFMuuaxojwYxoOc2EiL_J_beLEQYOiLAdAmz3DGK1j3kcpFyk8UxyfqwfQkh58CWm_6u96ga3CR_tl9eEKA&h=tE9RLt55WKyujoqKdisH5olxoMysFUdXn09paO4KN7E",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 202,
      "ResponseHeaders": {
        "Azure-AsyncOperation": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778942916139246&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=l0dM_0uKoJ3pTGW0yLHwsDZIXSlcDd2HbEbrYL8-Njg1CNWKGVVJ-tXRKjShTtwFors8CN6dnXZ1te9nXX9Y1tCzAAMmlNrw6Q5-DtV6F4f-KUDCNmeY82iW06lFdjFM61yC9_ptumS6Xmuc1CATHotn-3Y7if2-Sq3KwnPVmXaIULzzWOuPYkQthPgSHlK-JRM4-upKT3NGiG7P9JVrKY6DGlkoAQ0MyuzSEr6L4D4_ILlkVCJ-oFXS7JP3Elq45As9Zb_mfJWwHtNiK_yABJg8F3fevPAZNAf0rfyrc0kdFnPe59SFb94oeQBsLCIQpM7rLfdqusxF09otS7_EFQ&h=9oLjuAn7ZL4huT1dLp1YOXBZ5w2SGuZ9EGtuK-08o2I",
        "Cache-Control": "no-cache",
        "Content-Length": "2",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:31:31 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778942916295748&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=sfNWrNfm3JXUym-jFLhGw-KrWqStVnR8MH-JBD0weL0p8Wv89qMa-aLwvkQ--tegxZaUu-rFsnAwEfrcCErzkuXnskwbFMZ2UtM2jrMPiyR-wJNTt212FIxBbWl82_sTAP8dZqhB6QMuAvyNaraVb8xE-NP0zJaxRFAvJp29gbXEz8CensK2LA8ozniYKr3BwaBlvmliY3-wfzh1wR2eAdoiOwWEaXVZb25bJiWb8opNCJOj3XbtLReKDH8TcrnSXErtPDdYVRPsD7vUEH03hSJ2PWh4b18cjU8VnHe9yW8zFXO2jae-FuxE1bA5zZlk-C1sIm-Lmv-2t2rAWO1_gA&h=H2FY_8pAR5JPb9LY_9SiJqgbp3n-s3ZWXlM3ujZ0DFY",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-02",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "b8dfb655-b1c6-4543-92ee-c558342ecd1d",
        "x-ms-ratelimit-remaining-subscription-global-reads": "16499",
        "x-ms-ratelimit-remaining-subscription-reads": "1099",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T113131Z:b8dfb655-b1c6-4543-92ee-c558342ecd1d",
        "X-MSEdge-Ref": "Ref A: 12C77A787ED341DFA888BF38259F6A5B Ref B: MAA201060516023 Ref C: 2025-03-18T11:31:30Z",
        "x-request-time": "0.046"
      },
      "ResponseBody": {}
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778942916295748&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=sfNWrNfm3JXUym-jFLhGw-KrWqStVnR8MH-JBD0weL0p8Wv89qMa-aLwvkQ--tegxZaUu-rFsnAwEfrcCErzkuXnskwbFMZ2UtM2jrMPiyR-wJNTt212FIxBbWl82_sTAP8dZqhB6QMuAvyNaraVb8xE-NP0zJaxRFAvJp29gbXEz8CensK2LA8ozniYKr3BwaBlvmliY3-wfzh1wR2eAdoiOwWEaXVZb25bJiWb8opNCJOj3XbtLReKDH8TcrnSXErtPDdYVRPsD7vUEH03hSJ2PWh4b18cjU8VnHe9yW8zFXO2jae-FuxE1bA5zZlk-C1sIm-Lmv-2t2rAWO1_gA&h=H2FY_8pAR5JPb9LY_9SiJqgbp3n-s3ZWXlM3ujZ0DFY",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 202,
      "ResponseHeaders": {
        "Azure-AsyncOperation": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778943224379295&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=qgJaXYlPUmAfimbVjVIiARcB0mu-gjH2zc89WB12UWRtINAg_zQh2uLI3t07lva7aJRJwCf4yghxiFg4qxgHNAnL68pA6i6HrZ5j_YmjOpX_JV7esqbOT5f0mQzf5wWen8sn63rlIIgYomsePNZyS572wGl5VoKN0nMq_6qDZ95NtLV7P3bU4i1Sx1EFYCQaWtZ3P0LkcyiwtqBLu7teoAL9T2kQo0QFAHvdy9nri3rwZp-dyBPafXLxw_5L7BfhWLOhqcCc8SXvcnopV9OKzmhdIKaTGiGRKa9yLsQbyUN8OGCm7wkZGdIJQV-zmxrRqcTIJm35NMmoP_hj4MAXwg&h=PEkl0nuqRChjYY0F49EHXVsuZxHbdJ5EQBkWVEpWRR4",
        "Cache-Control": "no-cache",
        "Content-Length": "2",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:32:02 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778943224379295&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=qgJaXYlPUmAfimbVjVIiARcB0mu-gjH2zc89WB12UWRtINAg_zQh2uLI3t07lva7aJRJwCf4yghxiFg4qxgHNAnL68pA6i6HrZ5j_YmjOpX_JV7esqbOT5f0mQzf5wWen8sn63rlIIgYomsePNZyS572wGl5VoKN0nMq_6qDZ95NtLV7P3bU4i1Sx1EFYCQaWtZ3P0LkcyiwtqBLu7teoAL9T2kQo0QFAHvdy9nri3rwZp-dyBPafXLxw_5L7BfhWLOhqcCc8SXvcnopV9OKzmhdIKaTGiGRKa9yLsQbyUN8OGCm7wkZGdIJQV-zmxrRqcTIJm35NMmoP_hj4MAXwg&h=PEkl0nuqRChjYY0F49EHXVsuZxHbdJ5EQBkWVEpWRR4",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-01",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "383f8500-b055-4f2c-801d-9cc7c1cc23a9",
        "x-ms-ratelimit-remaining-subscription-global-reads": "16499",
        "x-ms-ratelimit-remaining-subscription-reads": "1099",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T113202Z:383f8500-b055-4f2c-801d-9cc7c1cc23a9",
        "X-MSEdge-Ref": "Ref A: 97B607DD9CFD4835804D96D05020E697 Ref B: MAA201060516023 Ref C: 2025-03-18T11:32:01Z",
        "x-request-time": "0.034"
      },
      "ResponseBody": {}
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778943224379295&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=qgJaXYlPUmAfimbVjVIiARcB0mu-gjH2zc89WB12UWRtINAg_zQh2uLI3t07lva7aJRJwCf4yghxiFg4qxgHNAnL68pA6i6HrZ5j_YmjOpX_JV7esqbOT5f0mQzf5wWen8sn63rlIIgYomsePNZyS572wGl5VoKN0nMq_6qDZ95NtLV7P3bU4i1Sx1EFYCQaWtZ3P0LkcyiwtqBLu7teoAL9T2kQo0QFAHvdy9nri3rwZp-dyBPafXLxw_5L7BfhWLOhqcCc8SXvcnopV9OKzmhdIKaTGiGRKa9yLsQbyUN8OGCm7wkZGdIJQV-zmxrRqcTIJm35NMmoP_hj4MAXwg&h=PEkl0nuqRChjYY0F49EHXVsuZxHbdJ5EQBkWVEpWRR4",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 202,
      "ResponseHeaders": {
        "Azure-AsyncOperation": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778943532607819&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=KlLsr13QsR1hKprhSBiAmKg4h2bpdlGyeqbhnwC9mfmLFZS4tN9X4H-eLJtP4aJsOuki8E7a336OdExFd18wA5vQRNSvoBzAmFlEwH1PNxYR3nxyArnrhgstDaRfhgCDEtE6eeqIWgvEwQVcmz0XXp_d_xisOl6IhqZV08NoLAvEimOQowWIBnZa3noPUiPUeMCzu5wGV1EWyM0mKUiOEY-A8rqWahiEgCMUdk_7ZjGH9KuYvtUSS_v4PeJjsFtsrnp7ueSdL7wy-K4vv14qymWcc7rkOSL9Y9_U_s3_7W_yuF8YmCyhPm72075HoTL7z70U9j3JFBOpSyI8Ha7RKw&h=c8_9WlV4aRkYkw8mnEj69PV2R_d_ErRqMuvP111UJWI",
        "Cache-Control": "no-cache",
        "Content-Length": "2",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 18 Mar 2025 11:32:33 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778943532763796&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=YDozAmq60FA57tzFGXywqQMgIsQXmP8HiPTm0VXcltOVI_JklT1hrKsnApvE6iz30ys97cRENuK8gmUdl9k0zZ29eQVv0Vr4-kCEswKGWAemX3YBoJSdwmgq1RD1O6jxai7GpnqLosG6i2d8Wz1-M7-M8kNwS4txPGNueB_MauChObtqrYDNYyrJaW5mWdNyFEbZ4HYUl_34ktjKyNNaKk_RSRTxIKRKs9k3zpvryyzLGgg-ADwqSn5sasx3NtKe6FkUgwclEx6fC3QXg1MN7IWhBLqo8qqhJLIENu7vTfSWcodh55AoWzgDobWrLG4joLOYbPwmv61HtP2pEPiSrw&h=Cr7uRxq7WkbBXwWqf_5Aa5FkS1kkEkZO18pDFmdxTcw",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-02",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "56f83ba6-e446-4215-afa0-f852a49cb758",
        "x-ms-ratelimit-remaining-subscription-global-reads": "16499",
        "x-ms-ratelimit-remaining-subscription-reads": "1099",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T113233Z:56f83ba6-e446-4215-afa0-f852a49cb758",
        "X-MSEdge-Ref": "Ref A: 2F86E4AB6F9944B4AC05093AD6E1D08C Ref B: MAA201060516023 Ref C: 2025-03-18T11:32:32Z",
        "x-request-time": "0.036"
      },
      "ResponseBody": {}
    },
    {
      "RequestUri": "https://Sanitized.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/westus/mfeOperationResults/jc:4830284c-8448-41aa-bcdd-55399c88f511:elated_yam_jplp83cys8?api-version=2023-04-01-preview&t=638778943532763796&c=MIIHpTCCBo2gAwIBAgITfwTYxBKzZMhYMh8gpgAEBNjEEjANBgkqhkiG9w0BAQsFADBEMRMwEQYKCZImiZPyLGQBGRYDR0JMMRMwEQYKCZImiZPyLGQBGRYDQU1FMRgwFgYDVQQDEw9BTUUgSW5mcmEgQ0EgMDIwHhcNMjUwMTIzMjEyMjI0WhcNMjUwNzIyMjEyMjI0WjBAMT4wPAYDVQQDEzVhc3luY29wZXJhdGlvbnNpZ25pbmdjZXJ0aWZpY2F0ZS5tYW5hZ2VtZW50LmF6dXJlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMrrszb3bc9Q1RUgoqqflSt3305JG-JAerAKaHI2ZPPmF47CFxNAOU8gQ1SC9-Z2cbgmGU-arGQ5vZbVO0uejbPtMmt10RPMHuIWQkH_oK8V4gN4tCUldex2vnRpGPtfsfy1OVTMSjzA9wE-oRmtDI1pokTRWQdVHmVJl4Z7WZC9-cWHJiPBthd-BXVSIAmZCA0SoTDokhXuiLmJgWhkCVqfcAtzhifnPZDXu9sGNR39yBuveQ_fYNJGUC9pP6-U426aEVoApoLpLoXz4iSn3DDPQKcsq7rKQnXde1_jx-IJOiTMo1pQgj5KHmM94XIlUNiEc8h6bqwDw0BJxgMhoq0CAwEAAaOCBJIwggSOMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwPQYJKwYBBAGCNxUHBDAwLgYmKwYBBAGCNxUIhpDjDYTVtHiE8Ys-hZvdFs6dEoFghfmRS4WsmTQCAWQCAQcwggHaBggrBgEFBQcBAQSCAcwwggHIMGYGCCsGAQUFBzAChlpodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpaW5mcmEvQ2VydHMvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmwxLmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MFYGCCsGAQUFBzAChkpodHRwOi8vY3JsMi5hbWUuZ2JsL2FpYS9CTDJQS0lJTlRDQTAxLkFNRS5HQkxfQU1FJTIwSW5mcmElMjBDQSUyMDAyKDQpLmNydDBWBggrBgEFBQcwAoZKaHR0cDovL2NybDMuYW1lLmdibC9haWEvQkwyUEtJSU5UQ0EwMS5BTUUuR0JMX0FNRSUyMEluZnJhJTIwQ0ElMjAwMig0KS5jcnQwVgYIKwYBBQUHMAKGSmh0dHA6Ly9jcmw0LmFtZS5nYmwvYWlhL0JMMlBLSUlOVENBMDEuQU1FLkdCTF9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3J0MB0GA1UdDgQWBBTuuvoUWDWVTrCAILP0aOKOwV9QqjAOBgNVHQ8BAf8EBAMCBaAwggE1BgNVHR8EggEsMIIBKDCCASSgggEgoIIBHIZCaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraWluZnJhL0NSTC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMS5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMi5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsMy5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JshjRodHRwOi8vY3JsNC5hbWUuZ2JsL2NybC9BTUUlMjBJbmZyYSUyMENBJTIwMDIoNCkuY3JsMIGdBgNVHSAEgZUwgZIwDAYKKwYBBAGCN3sBATBmBgorBgEEAYI3ewICMFgwVgYIKwYBBQUHAgIwSh5IADMAMwBlADAAMQA5ADIAMQAtADQAZAA2ADQALQA0AGYAOABjAC0AYQAwADUANQAtADUAYgBkAGEAZgBmAGQANQBlADMAMwBkMAwGCisGAQQBgjd7AwIwDAYKKwYBBAGCN3sEAjAfBgNVHSMEGDAWgBSuecJrXSWIEwb2BwnDl3x7l48dVTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDQYJKoZIhvcNAQELBQADggEBAGOf8CYfQMTcLZLuep4NmPG5yM4RapHWdtSKaxCrSjhUdNPLd0sUmofPOlvZkha0hFS_cjy2F5PPIgn4jz8g1x1Qrf3XaZG_B047uvLLj6tGyQEkwXZEtn1ZjLowBC_iNvyQ_eyULxAHVmKb8SqiSqO1ZEZtkeTcjII_IphdYLadJFbPMEoKCykRuNb4MNsbCpJcMn10qjvXEH0JcHGfkeHMp7Ruzj6one5NZavi_Bi6rmqOsT54dYy1lMu6S3aPB0bklK7Yje-_l6iWrFFRlKxg8x0cKytCiSG1MzMVsM2xjFRmyfb89lLBYjT5u3Mmlm-zTsFu-NfI1lj81wOoUkA&s=YDozAmq60FA57tzFGXywqQMgIsQXmP8HiPTm0VXcltOVI_JklT1hrKsnApvE6iz30ys97cRENuK8gmUdl9k0zZ29eQVv0Vr4-kCEswKGWAemX3YBoJSdwmgq1RD1O6jxai7GpnqLosG6i2d8Wz1-M7-M8kNwS4txPGNueB_MauChObtqrYDNYyrJaW5mWdNyFEbZ4HYUl_34ktjKyNNaKk_RSRTxIKRKs9k3zpvryyzLGgg-ADwqSn5sasx3NtKe6FkUgwclEx6fC3QXg1MN7IWhBLqo8qqhJLIENu7vTfSWcodh55AoWzgDobWrLG4joLOYbPwmv61HtP2pEPiSrw&h=Cr7uRxq7WkbBXwWqf_5Aa5FkS1kkEkZO18pDFmdxTcw",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.27.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.26100-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "0",
        "Date": "Tue, 18 Mar 2025 11:33:03 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-westus-02",
        "X-Cache": "CONFIG_NOCACHE",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "2a332ffd-2ec7-43d6-8e82-66b2621a4edc",
        "x-ms-ratelimit-remaining-subscription-global-reads": "16499",
        "x-ms-ratelimit-remaining-subscription-reads": "1099",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "SOUTHINDIA:20250318T113304Z:2a332ffd-2ec7-43d6-8e82-66b2621a4edc",
        "X-MSEdge-Ref": "Ref A: F166015A455E4B7F9B939C9BD614A8D9 Ref B: MAA201060516023 Ref C: 2025-03-18T11:33:03Z",
        "x-request-time": "0.035"
      },
      "ResponseBody": null
    }
  ],
  "Variables": {}
}
